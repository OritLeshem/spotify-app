{"ast":null,"code":"import axios from \"axios\";\n// const API_KEY = process.env.REACT_APP_API_KEY\nconst API_KEY = \"AIzaSyDbYtw99FWbtr4RCHxS0dxtj3--vXfSp4E\";\nexport const youtubeService = {\n  getVideoResults,\n  getTimeOfSong,\n  formatDuration,\n  convertDurationToSeconds\n};\nasync function getVideoResults(val) {\n  const results = [];\n  try {\n    const res = await axios.get(`https://www.googleapis.com/youtube/v3/search?part=snippet&videoEmbeddable=true&maxResults=5&type=video&key=${API_KEY}&q=${val}`);\n    const videos = res.data.items;\n    videos.map(video => {\n      if (video.snippet.title.includes('Trailer') || !video.snippet.title) return;\n      const song = {\n        id: video.id.videoId,\n        title: video.snippet.title,\n        imgUrl: video.snippet.thumbnails.high.url,\n        artist: video.snippet.channelTitle\n      };\n      results.push(song);\n    });\n    console.log(results);\n    return results;\n  } catch (err) {\n    console.log(err);\n    return err;\n  }\n}\nasync function getTimeOfSong(val) {\n  console.log('vallllll', val);\n  if (!val) {\n    console.error(\"Error: Invalid or missing video ID\");\n    throw new Error(\"Invalid or missing video ID\");\n  }\n  console.log(\"val\", val);\n  // const res = await axios.get(`https://www.googleapis.com/youtube/v3/videos?id=qwoyUpxjQ9c&part=contentDetails&key=AIzaSyDbYtw99FWbtr4RCHxS0dxtj3--vXfSp4E`)\n\n  const res = await axios.get(`https://www.googleapis.com/youtube/v3/videos?id=${val}&part=contentDetails&key=AIzaSyDbYtw99FWbtr4RCHxS0dxtj3--vXfSp4E`);\n  console.log(\"API response\", res);\n  console.log(\"API response data\", res.data);\n  if (res.data.items && res.data.items[0]) {\n    console.log(\"getTimeOfSong\", res.data.items[0].contentDetails.duration);\n    return res.data.items[0].contentDetails.duration;\n  } else {\n    console.error(\"Error: Unable to fetch contentDetails for the given video ID\");\n    throw new Error(\"Unable to fetch contentDetails for the given video ID\");\n  }\n}\nfunction formatDuration(res) {\n  const isDuration = res.data.items[0].contentDetails.duration;\n  const regex = /^PT(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+)S)?$/;\n  const matches = isDuration.match(regex);\n  const hours = parseInt(matches[1]) || 0;\n  const minutes = parseInt(matches[2]) || 0;\n  const seconds = parseInt(matches[3]) || 0;\n  const totalMinutes = hours * 60 + minutes;\n  const formattedMinutes = totalMinutes.toString().padStart(2, '0');\n  const formattedSeconds = seconds.toString().padStart(2, '0');\n  return `${formattedMinutes}:${formattedSeconds}`;\n}\nfunction convertDurationToSeconds(res) {\n  const duration = res.data.items[0].contentDetails.duration;\n  var match = duration.match(/PT(\\d+H)?(\\d+M)?(\\d+S)?/);\n  var hours = parseInt(match[1]) || 0;\n  var minutes = parseInt(match[2]) || 0;\n  var seconds = parseInt(match[3]) || 0;\n  return hours * 3600 + minutes * 60 + seconds;\n}","map":{"version":3,"names":["axios","API_KEY","youtubeService","getVideoResults","getTimeOfSong","formatDuration","convertDurationToSeconds","val","results","res","get","videos","data","items","map","video","snippet","title","includes","song","id","videoId","imgUrl","thumbnails","high","url","artist","channelTitle","push","console","log","err","error","Error","contentDetails","duration","isDuration","regex","matches","match","hours","parseInt","minutes","seconds","totalMinutes","formattedMinutes","toString","padStart","formattedSeconds"],"sources":["/Users/orit/Documents/CodingAcademy/spotify/frontend/src/services/youtube.service.js"],"sourcesContent":["import axios from \"axios\"\n// const API_KEY = process.env.REACT_APP_API_KEY\nconst API_KEY = \"AIzaSyDbYtw99FWbtr4RCHxS0dxtj3--vXfSp4E\"\nexport const youtubeService = {\n  getVideoResults,\n  getTimeOfSong,\n  formatDuration,\n  convertDurationToSeconds\n}\n\nasync function getVideoResults(val) {\n  const results = []\n  try {\n    const res = await axios.get(`https://www.googleapis.com/youtube/v3/search?part=snippet&videoEmbeddable=true&maxResults=5&type=video&key=${API_KEY}&q=${val}`)\n    const videos = res.data.items\n    videos.map(video => {\n      if (video.snippet.title.includes('Trailer') || !video.snippet.title) return\n      const song = {\n        id: video.id.videoId,\n        title: video.snippet.title,\n        imgUrl: video.snippet.thumbnails.high.url,\n        artist: video.snippet.channelTitle\n      }\n      results.push(song)\n    })\n    console.log(results)\n    return results\n  }\n  catch (err) {\n    console.log(err)\n    return err\n  }\n}\n\nasync function getTimeOfSong(val) {\n  console.log('vallllll', val)\n\n  if (!val) {\n    console.error(\"Error: Invalid or missing video ID\");\n    throw new Error(\"Invalid or missing video ID\");\n  }\n  console.log(\"val\", val)\n  // const res = await axios.get(`https://www.googleapis.com/youtube/v3/videos?id=qwoyUpxjQ9c&part=contentDetails&key=AIzaSyDbYtw99FWbtr4RCHxS0dxtj3--vXfSp4E`)\n\n  const res = await axios.get(`https://www.googleapis.com/youtube/v3/videos?id=${val}&part=contentDetails&key=AIzaSyDbYtw99FWbtr4RCHxS0dxtj3--vXfSp4E`)\n  console.log(\"API response\", res);\n  console.log(\"API response data\", res.data);\n\n  if (res.data.items && res.data.items[0]) {\n    console.log(\"getTimeOfSong\", res.data.items[0].contentDetails.duration)\n    return res.data.items[0].contentDetails.duration\n  } else {\n    console.error(\"Error: Unable to fetch contentDetails for the given video ID\");\n    throw new Error(\"Unable to fetch contentDetails for the given video ID\");\n  }\n}\n\nfunction formatDuration(res) {\n  const isDuration = res.data.items[0].contentDetails.duration\n  const regex = /^PT(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+)S)?$/;\n  const matches = isDuration.match(regex);\n\n  const hours = parseInt(matches[1]) || 0;\n  const minutes = parseInt(matches[2]) || 0;\n  const seconds = parseInt(matches[3]) || 0;\n\n  const totalMinutes = (hours * 60) + minutes;\n  const formattedMinutes = totalMinutes.toString().padStart(2, '0');\n  const formattedSeconds = seconds.toString().padStart(2, '0');\n\n  return `${formattedMinutes}:${formattedSeconds}`\n}\nfunction convertDurationToSeconds(res) {\n  const duration = res.data.items[0].contentDetails.duration\n\n  var match = duration.match(/PT(\\d+H)?(\\d+M)?(\\d+S)?/);\n  var hours = (parseInt(match[1]) || 0);\n  var minutes = (parseInt(match[2]) || 0);\n  var seconds = (parseInt(match[3]) || 0);\n  return hours * 3600 + minutes * 60 + seconds;\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}