{"ast":null,"code":"import { store } from './store';\nimport { SET_PLAYLIST, ADD_SONG_TO_PLAYLIST, REMOVE_SONG_FROM_PLAYLIST, ADD_PLAYLIST, REMOVE_PLAYLIST, SET_PLAYLISTS, UNDO_REMOVE_PLAYLIST, UPDATE_PLAYLIST } from './playlist.reducer';\nimport { showSuccessMsg, showErrorMsg } from '../services/event-bus.service';\nimport { playlistService } from '../services/playlist.service.local';\n// import { playlistService } from '../services/playlist.service'\n\n// Action Creators:\nexport function getActionRemovePlaylist(playlistId) {\n  return {\n    type: REMOVE_PLAYLIST,\n    playlistId\n  };\n}\nexport function getActionRemoveSongFromPlaylist(playlist, songId) {\n  return {\n    type: REMOVE_SONG_FROM_PLAYLIST,\n    playlist\n  };\n}\nexport function getActionAddPlaylist(playlist) {\n  return {\n    type: ADD_PLAYLIST,\n    playlist\n  };\n}\nexport function getActionUpdatePlaylist(playlist) {\n  return {\n    type: UPDATE_PLAYLIST,\n    playlist\n  };\n}\nexport async function loadPlaylists(filterBy) {\n  try {\n    const playlists = await playlistService.query(filterBy);\n    store.dispatch({\n      type: SET_PLAYLISTS,\n      playlists\n    });\n  } catch (err) {\n    console.log('Cannot load playlists', err);\n    throw err;\n  }\n}\nexport async function loadPlaylist(playlistId) {\n  try {\n    const playlist = await playlistService.getById(playlistId);\n    store.dispatch({\n      type: SET_PLAYLIST,\n      playlist\n    });\n  } catch (err) {\n    console.log('cannot load playlist', err);\n    throw err;\n  }\n}\nexport async function removePlaylist(playlistId) {\n  try {\n    await playlistService.remove(playlistId);\n    store.dispatch(getActionRemovePlaylist(playlistId));\n  } catch (err) {\n    console.log('Cannot remove playlist', err);\n    throw err;\n  }\n}\nexport async function addPlaylist(playlist) {\n  try {\n    const savedPlaylist = await playlistService.save(playlist);\n    console.log('Added Playlist', savedPlaylist);\n    store.dispatch(getActionAddPlaylist(savedPlaylist));\n    return savedPlaylist;\n  } catch (err) {\n    console.log('Cannot add playlist', err);\n    throw err;\n  }\n}\nexport async function updatePlaylist(playlist, nameOfPlaylist) {\n  try {\n    let savedPlaylist = await playlistService.save(playlist);\n    let newName = nameOfPlaylist;\n    console.log('Updated Playlist:', savedPlaylist);\n    store.dispatch(getActionUpdatePlaylist(savedPlaylist));\n    return savedPlaylist;\n  } catch (err) {\n    console.log('Cannot save playlist', err);\n    throw err;\n  }\n}\n\n// Demo for Optimistic Mutation \n// (IOW - Assuming the server call will work, so updating the UI first)\nexport async function onRemovePlaylistOptimistic(playlistId) {\n  store.dispatch({\n    type: REMOVE_PLAYLIST,\n    playlistId\n  });\n  showSuccessMsg('Playlist removed');\n  try {\n    await playlistService.remove(playlistId);\n    console.log('Server Reported - Deleted Succesfully');\n  } catch (err) {\n    showErrorMsg('Cannot remove playlist');\n    console.log('Cannot load playlists', err);\n    store.dispatch({\n      type: UNDO_REMOVE_PLAYLIST\n    });\n  }\n}\n// Song in playlist\n\nexport async function addSonfToPlaylist(playlistId, newSong) {\n  try {\n    let newPlaylist = await playlistService.getById(playlistId);\n    newPlaylist = {\n      ...newPlaylist,\n      songs: [...newPlaylist.songs, newSong]\n    };\n    const savedPlaylist = await playlistService.save(newPlaylist);\n    console.log('Added Playlist', savedPlaylist);\n    showSuccessMsg('song added succesfully');\n    store.dispatch({\n      type: ADD_SONG_TO_PLAYLIST,\n      playlist: savedPlaylist\n    });\n    return savedPlaylist;\n  } catch (err) {\n    console.log('Cannot add playlist', err);\n    throw err;\n  }\n}\nexport async function removeSongFromPlayList(playlistId, songId) {\n  try {\n    let playlist = await playlistService.getById(playlistId);\n    let removedSong = playlist.songs.filter(song => song.id !== songId);\n    playlist = {\n      ...playlist,\n      songs: removedSong\n    };\n    await playlistService.save(playlist);\n    store.dispatch(getActionRemoveSongFromPlaylist(playlist));\n    console.log(playlist.songs.length);\n  } catch (err) {\n    console.log('Cannot remove playlist', err);\n    throw err;\n  }\n}","map":{"version":3,"names":["store","SET_PLAYLIST","ADD_SONG_TO_PLAYLIST","REMOVE_SONG_FROM_PLAYLIST","ADD_PLAYLIST","REMOVE_PLAYLIST","SET_PLAYLISTS","UNDO_REMOVE_PLAYLIST","UPDATE_PLAYLIST","showSuccessMsg","showErrorMsg","playlistService","getActionRemovePlaylist","playlistId","type","getActionRemoveSongFromPlaylist","playlist","songId","getActionAddPlaylist","getActionUpdatePlaylist","loadPlaylists","filterBy","playlists","query","dispatch","err","console","log","loadPlaylist","getById","removePlaylist","remove","addPlaylist","savedPlaylist","save","updatePlaylist","nameOfPlaylist","newName","onRemovePlaylistOptimistic","addSonfToPlaylist","newSong","newPlaylist","songs","removeSongFromPlayList","removedSong","filter","song","id","length"],"sources":["/Users/orit/Documents/CodingAcademy/spotify/frontend/src/store/playlist.actions.js"],"sourcesContent":["import { store } from './store'\r\nimport { SET_PLAYLIST, ADD_SONG_TO_PLAYLIST, REMOVE_SONG_FROM_PLAYLIST, ADD_PLAYLIST, REMOVE_PLAYLIST, SET_PLAYLISTS, UNDO_REMOVE_PLAYLIST, UPDATE_PLAYLIST } from './playlist.reducer'\r\n\r\nimport { showSuccessMsg, showErrorMsg } from '../services/event-bus.service'\r\nimport { playlistService } from '../services/playlist.service.local'\r\n// import { playlistService } from '../services/playlist.service'\r\n\r\n// Action Creators:\r\nexport function getActionRemovePlaylist(playlistId) {\r\n    return { type: REMOVE_PLAYLIST, playlistId }\r\n}\r\nexport function getActionRemoveSongFromPlaylist(playlist, songId) {\r\n    return { type: REMOVE_SONG_FROM_PLAYLIST, playlist }\r\n}\r\nexport function getActionAddPlaylist(playlist) {\r\n    return { type: ADD_PLAYLIST, playlist }\r\n}\r\nexport function getActionUpdatePlaylist(playlist) {\r\n    return { type: UPDATE_PLAYLIST, playlist }\r\n}\r\n\r\nexport async function loadPlaylists(filterBy) {\r\n    try {\r\n        const playlists = await playlistService.query(filterBy)\r\n        store.dispatch({ type: SET_PLAYLISTS, playlists })\r\n    } catch (err) {\r\n        console.log('Cannot load playlists', err)\r\n        throw err\r\n    }\r\n}\r\n\r\nexport async function loadPlaylist(playlistId) {\r\n    try {\r\n        const playlist = await playlistService.getById(playlistId)\r\n        store.dispatch({ type: SET_PLAYLIST, playlist })\r\n    } catch (err) {\r\n        console.log('cannot load playlist', err)\r\n        throw err\r\n    }\r\n}\r\n\r\nexport async function removePlaylist(playlistId) {\r\n    try {\r\n        await playlistService.remove(playlistId)\r\n        store.dispatch(getActionRemovePlaylist(playlistId))\r\n    } catch (err) {\r\n        console.log('Cannot remove playlist', err)\r\n        throw err\r\n    }\r\n}\r\n\r\n\r\nexport async function addPlaylist(playlist) {\r\n    try {\r\n        const savedPlaylist = await playlistService.save(playlist)\r\n        console.log('Added Playlist', savedPlaylist)\r\n        store.dispatch(getActionAddPlaylist(savedPlaylist))\r\n        return savedPlaylist\r\n    } catch (err) {\r\n        console.log('Cannot add playlist', err)\r\n        throw err\r\n    }\r\n}\r\n\r\n\r\nexport async function updatePlaylist(playlist, nameOfPlaylist) {\r\n    try {\r\n        let savedPlaylist = await playlistService.save(playlist)\r\n        let newName = nameOfPlaylist\r\n        console.log('Updated Playlist:', savedPlaylist)\r\n        store.dispatch(getActionUpdatePlaylist(savedPlaylist))\r\n        return savedPlaylist\r\n    } catch (err) {\r\n        console.log('Cannot save playlist', err)\r\n        throw err\r\n    }\r\n}\r\n\r\n// Demo for Optimistic Mutation \r\n// (IOW - Assuming the server call will work, so updating the UI first)\r\nexport async function onRemovePlaylistOptimistic(playlistId) {\r\n    store.dispatch({ type: REMOVE_PLAYLIST, playlistId })\r\n    showSuccessMsg('Playlist removed')\r\n    try {\r\n        await playlistService.remove(playlistId)\r\n        console.log('Server Reported - Deleted Succesfully')\r\n    } catch (err) {\r\n        showErrorMsg('Cannot remove playlist')\r\n        console.log('Cannot load playlists', err)\r\n        store.dispatch({ type: UNDO_REMOVE_PLAYLIST, })\r\n    }\r\n}\r\n// Song in playlist\r\n\r\nexport async function addSonfToPlaylist(playlistId, newSong) {\r\n    try {\r\n        let newPlaylist = await playlistService.getById(playlistId)\r\n        newPlaylist = { ...newPlaylist, songs: [...newPlaylist.songs, newSong] }\r\n        const savedPlaylist = await playlistService.save(newPlaylist)\r\n        console.log('Added Playlist', savedPlaylist)\r\n        showSuccessMsg('song added succesfully')\r\n        store.dispatch({ type: ADD_SONG_TO_PLAYLIST, playlist: savedPlaylist })\r\n        return savedPlaylist\r\n    } catch (err) {\r\n        console.log('Cannot add playlist', err)\r\n        throw err\r\n    }\r\n}\r\n\r\nexport async function removeSongFromPlayList(playlistId, songId) {\r\n    try {\r\n        let playlist = await playlistService.getById(playlistId)\r\n        let removedSong = playlist.songs.filter(song => song.id !== songId)\r\n        playlist = { ...playlist, songs: removedSong }\r\n        await playlistService.save(playlist)\r\n        store.dispatch(getActionRemoveSongFromPlaylist(playlist))\r\n        console.log(playlist.songs.length)\r\n    } catch (err) {\r\n        console.log('Cannot remove playlist', err)\r\n        throw err\r\n    }\r\n}\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}