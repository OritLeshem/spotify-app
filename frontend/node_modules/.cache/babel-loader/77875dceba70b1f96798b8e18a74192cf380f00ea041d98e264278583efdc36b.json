{"ast":null,"code":"var _jsxFileName = \"/Users/orit/Documents/CodingAcademy/spotify/frontend/src/cmps/edit-modal.jsx\",\n  _s = $RefreshSig$();\nimport defaultPhoto from '../assets/imgs/add-pic.png';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useState } from 'react';\nimport { SET_PLAYLIST, UPDATE_NAME_PLAYLIST, UPDATE_PLAYLIST } from '../store/playlist.reducer';\nimport { editNameOfPlayList, loadPlaylist, savePlaylist, updateGig } from '../store/playlist.actions';\nimport { useParams } from 'react-router-dom';\nimport { playlistService } from '../services/playlist.service.local';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function EditModal(_ref) {\n  _s();\n  let {\n    onCloseEditModal\n  } = _ref;\n  const dispatch = useDispatch();\n  let playlist = useSelector(storeState => storeState.playlistModule.playlist);\n  const [playlistToEdit, setPlaylistToEdit] = useState(playlist);\n  const {\n    playlistId\n  } = useParams();\n  console.log(playlistId);\n  function handleChange(_ref2) {\n    let {\n      target\n    } = _ref2;\n    console.log(target.value);\n    setPlaylistToEdit(prev => ({\n      ...prev,\n      name: target.value\n    }));\n  }\n  async function onSubmit(ev) {\n    ev.preventDefault();\n    console.log(\"submit was clicked\");\n    updateNaneOfPlayList(playlistId, playlistToEdit.name);\n    // let savedPlaylist = await playlistService.save({ ...playlist, nane: playlistToEdit.name })\n    // dispatchEvent({ type: UPDATE_NAME_PLAYLIST, playlist: playlistToEdit })\n    console.log(savedPlaylist);\n\n    // await updateGig(playlistToEdit)\n    // await loadPlaylist(playlistToEdit)\n\n    // console.log(playlistToEdit)\n\n    // try {\n    //   const playlist = await editNameOfPlayList(playlistId, playlistToEdit.name)\n    //   console.log('playlist saved', playlist);\n    //   // showSuccessMsg('saved Playlist!')\n    //   dispatch({ type: SET_PLAYLIST, playlist })\n    //   console.log(playlist)\n    // }\n    // catch (err) {\n    //   console.log('err', err)\n    //   // showErrorMsg('Cannot save playlist')\n    // }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"edit-modal\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => onCloseEditModal(),\n      children: \"x\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      submit: onSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"playlist-header-img-container \",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: defaultPhoto\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"playlist-detail-header-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: playlistToEdit.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"edit-name-input\",\n          placeholder: \"your playlist name\",\n          type: \"text\",\n          name: \"name\",\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onMouseDown: onSubmit,\n          type: \"submit\",\n          children: \"create\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 10\n  }, this);\n}\n_s(EditModal, \"ui4DLzhDzcIcDPqz9GoVtpz84oQ=\", false, function () {\n  return [useDispatch, useSelector, useParams];\n});\n_c = EditModal;\nvar _c;\n$RefreshReg$(_c, \"EditModal\");","map":{"version":3,"names":["defaultPhoto","useDispatch","useSelector","useState","SET_PLAYLIST","UPDATE_NAME_PLAYLIST","UPDATE_PLAYLIST","editNameOfPlayList","loadPlaylist","savePlaylist","updateGig","useParams","playlistService","jsxDEV","_jsxDEV","EditModal","_ref","_s","onCloseEditModal","dispatch","playlist","storeState","playlistModule","playlistToEdit","setPlaylistToEdit","playlistId","console","log","handleChange","_ref2","target","value","prev","name","onSubmit","ev","preventDefault","updateNaneOfPlayList","savedPlaylist","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","submit","src","placeholder","type","onChange","onMouseDown","_c","$RefreshReg$"],"sources":["/Users/orit/Documents/CodingAcademy/spotify/frontend/src/cmps/edit-modal.jsx"],"sourcesContent":["import defaultPhoto from '../assets/imgs/add-pic.png'\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useState } from 'react';\nimport { SET_PLAYLIST, UPDATE_NAME_PLAYLIST, UPDATE_PLAYLIST } from '../store/playlist.reducer';\nimport { editNameOfPlayList, loadPlaylist, savePlaylist, updateGig } from '../store/playlist.actions';\nimport { useParams } from 'react-router-dom';\nimport { playlistService } from '../services/playlist.service.local'\n\n\nexport function EditModal({ onCloseEditModal }) {\n  const dispatch = useDispatch()\n  let playlist = useSelector(storeState => storeState.playlistModule.playlist)\n  const [playlistToEdit, setPlaylistToEdit] = useState(playlist)\n  const { playlistId } = useParams()\n  console.log(playlistId)\n\n  function handleChange({ target }) {\n    console.log(target.value)\n    setPlaylistToEdit((prev) => ({ ...prev, name: target.value }))\n  }\n\n\n\n  async function onSubmit(ev) {\n    ev.preventDefault()\n    console.log(\"submit was clicked\")\n    updateNaneOfPlayList(playlistId, playlistToEdit.name)\n    // let savedPlaylist = await playlistService.save({ ...playlist, nane: playlistToEdit.name })\n    // dispatchEvent({ type: UPDATE_NAME_PLAYLIST, playlist: playlistToEdit })\n    console.log(savedPlaylist)\n\n\n    // await updateGig(playlistToEdit)\n    // await loadPlaylist(playlistToEdit)\n\n\n    // console.log(playlistToEdit)\n\n    // try {\n    //   const playlist = await editNameOfPlayList(playlistId, playlistToEdit.name)\n    //   console.log('playlist saved', playlist);\n    //   // showSuccessMsg('saved Playlist!')\n    //   dispatch({ type: SET_PLAYLIST, playlist })\n    //   console.log(playlist)\n    // }\n    // catch (err) {\n    //   console.log('err', err)\n    //   // showErrorMsg('Cannot save playlist')\n    // }\n\n\n\n  }\n  return <div className='edit-modal'>\n    <button onClick={() => onCloseEditModal()}>x</button>\n    <form submit={onSubmit}>\n      <div className='playlist-header-img-container '>\n        <img src={defaultPhoto} />\n      </div>\n\n      <div className='playlist-detail-header-info'>\n        <h1>{playlistToEdit.name}</h1>\n        <input\n          className=\"edit-name-input\"\n          placeholder='your playlist name'\n          type=\"text\"\n          name=\"name\"\n          onChange={handleChange}\n\n\n        />\n\n        <button onMouseDown={onSubmit} type=\"submit\">create</button>\n\n      </div>\n    </form>\n  </div >\n\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}