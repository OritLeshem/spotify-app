{"ast":null,"code":"var _jsxFileName = \"/Users/orit/Documents/CodingAcademy/spotify/frontend/src/cmps/player-bar.jsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState, useRef } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport YouTube from 'react-youtube';\nimport { ISPLAYING, SET_CURRENT_SONG } from '../store/player.reducer';\nimport { PlayBtnBar, RepeatBtn, ShuffleBtn, SkipBackBtn, SkipForwardBtn } from \"./form\";\nimport { youtubeService } from '../services/youtube.service';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst opts = {\n  height: '0',\n  width: '0',\n  playerVars: {\n    autoplay: 0,\n    controls: 0,\n    showinfo: 0,\n    rel: 0\n  }\n};\n\n// export function PlayerBar() {\n\n//     const [currentTime, setCurrentTime] = useState(0);\n//     const [duration, setDuration] = useState(0);\n//     const progressPercentage = (currentTime / duration) * 100;\n\n//     const currentSong = useSelector(storeState => storeState.playerModule.currentSong)\n//     const isPlaying = useSelector(storeState => storeState.playerModule.isPlaying)\n//     const playSongs = useSelector(storeState => storeState.playlistModule.playSongs)\n//     const playerRef = useRef(null)\n//     const [time, setTime] = useState(0)\n//     const dispatch = useDispatch()\n\n//     function handleChange(event) {\n//         setCurrentTime(event.target.value);\n//     }\n\n//     function onReady(event) {\n//         setTimeout(() => {\n//             playerRef.current = event.target;\n//             if (isPlaying) {\n//                 playerRef.current.playVideo()\n//             }\n//             if (playerRef.current && isPlaying) {\n//                 playerRef.current.playVideo()\n//             }\n//         }, 500)\n\n//     }\n\n//     if (playerRef.current && !isPlaying) {\n//         playerRef.current.pauseVideo()\n//     }\n\n//     if (playerRef.current && isPlaying) {\n//         playerRef.current.playVideo()\n//     }\n\n//     const onPlayButtonClick = (ev) => {\n//         const test = String(ev.target)\n//         if (!isPlaying && playerRef) {\n//             playerRef.current.pauseVideo()\n//         }\n//         if (isPlaying && playerRef && test.includes('Span')) {\n//             playerRef.current.playVideo()\n//         }\n//         dispatch({ type: ISPLAYING })\n//     }\n//     function handleNextSong() {\n//         console.log(\"currentSong\", currentSong)\n//         const currIndex = playSongs.indexOf(currentSong)\n//         if (currIndex === playSongs.length - 1) dispatch({ type: SET_CURRENT_SONG, song: playSongs[0] })\n//         else dispatch({ type: SET_CURRENT_SONG, song: playSongs[currIndex + 1] })\n//         console.log(\"currIndex\", currIndex)\n//     }\n\n//     return <section className=\"player-bar\">\n//         <div className=\"player-control\">\n//             <ShuffleBtn />\n//             <SkipBackBtn />\n//             <button onClick={onPlayButtonClick}>\n//                 {isPlaying ? <span className='fa-solid pause'></span> : <PlayBtnBar />}\n//             </button>\n//             {currentSong && <YouTube videoId={currentSong.id || \"4m1EFMoRFvY\"} opts={opts} onReady={onReady} />}\n//             {/* <PlayBtnBar /> */}\n//             <button onClick={handleNextSong}> <SkipForwardBtn /></button>\n//             {/* <SkipForwardBtn /> */}\n//             <RepeatBtn />\n//         </div>\n//         <div className=\"playback-bar\">\n//             <small>0:00</small>\n//             <div className=\"slider-container\">\n//                 <input type=\"range\"\n//                     min=\"0\"\n//                     max={duration}\n//                     step=\"1\"\n//                     className=\"slider\"\n//                     value={currentTime}\n//                     onChange={handleChange} />\n//                 <div className=\"progress\" style={{ width: `${progressPercentage}%` }}></div>\n//             </div>\n//             <small>03:20</small>\n//         </div>\n//     </section>\n// }\n\nexport function PlayerBar() {\n  _s();\n  const [currentTime, setCurrentTime] = useState(0);\n  const [duration, setDuration] = useState(0);\n  const progressPercentage = currentTime / duration * 100;\n  const currentSong = useSelector(storeState => storeState.playerModule.currentSong);\n  const isPlaying = useSelector(storeState => storeState.playerModule.isPlaying);\n  const playSongs = useSelector(storeState => storeState.playlistModule.playSongs);\n  const playerRef = useRef(null);\n  const dispatch = useDispatch();\n  function handleChange(event) {\n    const newTime = event.target.value;\n    setCurrentTime(newTime);\n    playerRef.current.seekTo(newTime);\n  }\n  function onReady(event) {\n    const duration = event.target.getDuration();\n    setDuration(duration);\n    if (isPlaying) {\n      playerRef.current.playVideo();\n    }\n  }\n  function onStateChange(event) {\n    const currentTime = event.target.getCurrentTime();\n    setCurrentTime(currentTime);\n  }\n  function formatTime(time) {\n    const minutes = Math.floor(time / 60);\n    const seconds = Math.floor(time % 60);\n    return `${minutes}:${seconds < 10 ? '0' : ''}${seconds}`;\n  }\n  function onProgress(event) {\n    const currentTime = event.target.getCurrentTime();\n    setCurrentTime(currentTime);\n  }\n  if (playerRef.current && !isPlaying) {\n    playerRef.current.pauseVideo();\n  }\n  if (playerRef.current && isPlaying) {\n    playerRef.current.playVideo();\n  }\n  const onPlayButtonClick = ev => {\n    const test = String(ev.target);\n    if (!isPlaying && playerRef) {\n      playerRef.current.pauseVideo();\n    }\n    if (isPlaying && playerRef && test.includes('Span')) {\n      playerRef.current.playVideo();\n    }\n    dispatch({\n      type: ISPLAYING\n    });\n  };\n  function handleNextSong() {\n    const currIndex = playSongs.indexOf(currentSong);\n    if (currIndex === playSongs.length - 1) dispatch({\n      type: SET_CURRENT_SONG,\n      song: playSongs[0]\n    });else dispatch({\n      type: SET_CURRENT_SONG,\n      song: playSongs[currIndex + 1]\n    });\n  }\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"player-bar\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"player-control\",\n      children: [/*#__PURE__*/_jsxDEV(ShuffleBtn, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(SkipBackBtn, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: onPlayButtonClick,\n        children: isPlaying ? /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"fa-solid pause\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 30\n        }, this) : /*#__PURE__*/_jsxDEV(PlayBtnBar, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 73\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 13\n      }, this), currentSong && /*#__PURE__*/_jsxDEV(YouTube, {\n        videoId: currentSong.id || \"4m1EFMoRFvY\",\n        opts: opts,\n        onReady: onReady,\n        onStateChange: onStateChange,\n        onProgress: onProgress\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 29\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleNextSong,\n        children: [\" \", /*#__PURE__*/_jsxDEV(SkipForwardBtn, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 47\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(RepeatBtn, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"playback-bar\",\n      children: [/*#__PURE__*/_jsxDEV(\"small\", {\n        children: formatTime(currentTime)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"slider-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"range\",\n          min: \"0\",\n          max: duration,\n          step: \"0.01\",\n          className: \"slider\",\n          value: currentTime,\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"progress\",\n          style: {\n            width: `${progressPercentage}%`\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n        children: formatTime(duration)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 180,\n    columnNumber: 12\n  }, this);\n}\n_s(PlayerBar, \"7LiILK67AbDzfwo5TXjK861jHVU=\", false, function () {\n  return [useSelector, useSelector, useSelector, useDispatch];\n});\n_c = PlayerBar;\nvar _c;\n$RefreshReg$(_c, \"PlayerBar\");","map":{"version":3,"names":["useEffect","useState","useRef","useDispatch","useSelector","YouTube","ISPLAYING","SET_CURRENT_SONG","PlayBtnBar","RepeatBtn","ShuffleBtn","SkipBackBtn","SkipForwardBtn","youtubeService","jsxDEV","_jsxDEV","opts","height","width","playerVars","autoplay","controls","showinfo","rel","PlayerBar","_s","currentTime","setCurrentTime","duration","setDuration","progressPercentage","currentSong","storeState","playerModule","isPlaying","playSongs","playlistModule","playerRef","dispatch","handleChange","event","newTime","target","value","current","seekTo","onReady","getDuration","playVideo","onStateChange","getCurrentTime","formatTime","time","minutes","Math","floor","seconds","onProgress","pauseVideo","onPlayButtonClick","ev","test","String","includes","type","handleNextSong","currIndex","indexOf","length","song","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","videoId","id","min","max","step","onChange","style","_c","$RefreshReg$"],"sources":["/Users/orit/Documents/CodingAcademy/spotify/frontend/src/cmps/player-bar.jsx"],"sourcesContent":["import { useEffect, useState, useRef } from 'react'\nimport { useDispatch, useSelector } from 'react-redux';\nimport YouTube from 'react-youtube';\nimport { ISPLAYING, SET_CURRENT_SONG } from '../store/player.reducer';\nimport { PlayBtnBar, RepeatBtn, ShuffleBtn, SkipBackBtn, SkipForwardBtn } from \"./form\";\nimport { youtubeService } from '../services/youtube.service';\n\n\n\n\n\nconst opts = {\n    height: '0',\n    width: '0',\n    playerVars: {\n        autoplay: 0,\n        controls: 0,\n        showinfo: 0,\n        rel: 0,\n    },\n}\n\n// export function PlayerBar() {\n\n//     const [currentTime, setCurrentTime] = useState(0);\n//     const [duration, setDuration] = useState(0);\n//     const progressPercentage = (currentTime / duration) * 100;\n\n\n\n\n//     const currentSong = useSelector(storeState => storeState.playerModule.currentSong)\n//     const isPlaying = useSelector(storeState => storeState.playerModule.isPlaying)\n//     const playSongs = useSelector(storeState => storeState.playlistModule.playSongs)\n//     const playerRef = useRef(null)\n//     const [time, setTime] = useState(0)\n//     const dispatch = useDispatch()\n\n//     function handleChange(event) {\n//         setCurrentTime(event.target.value);\n//     }\n\n\n\n//     function onReady(event) {\n//         setTimeout(() => {\n//             playerRef.current = event.target;\n//             if (isPlaying) {\n//                 playerRef.current.playVideo()\n//             }\n//             if (playerRef.current && isPlaying) {\n//                 playerRef.current.playVideo()\n//             }\n//         }, 500)\n\n\n//     }\n\n//     if (playerRef.current && !isPlaying) {\n//         playerRef.current.pauseVideo()\n//     }\n\n//     if (playerRef.current && isPlaying) {\n//         playerRef.current.playVideo()\n//     }\n\n//     const onPlayButtonClick = (ev) => {\n//         const test = String(ev.target)\n//         if (!isPlaying && playerRef) {\n//             playerRef.current.pauseVideo()\n//         }\n//         if (isPlaying && playerRef && test.includes('Span')) {\n//             playerRef.current.playVideo()\n//         }\n//         dispatch({ type: ISPLAYING })\n//     }\n//     function handleNextSong() {\n//         console.log(\"currentSong\", currentSong)\n//         const currIndex = playSongs.indexOf(currentSong)\n//         if (currIndex === playSongs.length - 1) dispatch({ type: SET_CURRENT_SONG, song: playSongs[0] })\n//         else dispatch({ type: SET_CURRENT_SONG, song: playSongs[currIndex + 1] })\n//         console.log(\"currIndex\", currIndex)\n//     }\n\n//     return <section className=\"player-bar\">\n//         <div className=\"player-control\">\n//             <ShuffleBtn />\n//             <SkipBackBtn />\n//             <button onClick={onPlayButtonClick}>\n//                 {isPlaying ? <span className='fa-solid pause'></span> : <PlayBtnBar />}\n//             </button>\n//             {currentSong && <YouTube videoId={currentSong.id || \"4m1EFMoRFvY\"} opts={opts} onReady={onReady} />}\n//             {/* <PlayBtnBar /> */}\n//             <button onClick={handleNextSong}> <SkipForwardBtn /></button>\n//             {/* <SkipForwardBtn /> */}\n//             <RepeatBtn />\n//         </div>\n//         <div className=\"playback-bar\">\n//             <small>0:00</small>\n//             <div className=\"slider-container\">\n//                 <input type=\"range\"\n//                     min=\"0\"\n//                     max={duration}\n//                     step=\"1\"\n//                     className=\"slider\"\n//                     value={currentTime}\n//                     onChange={handleChange} />\n//                 <div className=\"progress\" style={{ width: `${progressPercentage}%` }}></div>\n//             </div>\n//             <small>03:20</small>\n//         </div>\n//     </section>\n// }\n\nexport function PlayerBar() {\n\n    const [currentTime, setCurrentTime] = useState(0);\n    const [duration, setDuration] = useState(0);\n    const progressPercentage = (currentTime / duration) * 100;\n\n    const currentSong = useSelector(storeState => storeState.playerModule.currentSong)\n    const isPlaying = useSelector(storeState => storeState.playerModule.isPlaying)\n    const playSongs = useSelector(storeState => storeState.playlistModule.playSongs)\n    const playerRef = useRef(null)\n    const dispatch = useDispatch()\n\n    function handleChange(event) {\n        const newTime = event.target.value;\n        setCurrentTime(newTime);\n        playerRef.current.seekTo(newTime);\n    }\n\n    function onReady(event) {\n        const duration = event.target.getDuration();\n        setDuration(duration);\n        if (isPlaying) {\n            playerRef.current.playVideo()\n        }\n    }\n\n    function onStateChange(event) {\n        const currentTime = event.target.getCurrentTime();\n        setCurrentTime(currentTime);\n    }\n    function formatTime(time) {\n        const minutes = Math.floor(time / 60);\n        const seconds = Math.floor(time % 60);\n        return `${minutes}:${seconds < 10 ? '0' : ''}${seconds}`;\n    }\n    function onProgress(event) {\n        const currentTime = event.target.getCurrentTime();\n        setCurrentTime(currentTime);\n    }\n\n    if (playerRef.current && !isPlaying) {\n        playerRef.current.pauseVideo()\n    }\n\n    if (playerRef.current && isPlaying) {\n        playerRef.current.playVideo()\n    }\n\n    const onPlayButtonClick = (ev) => {\n        const test = String(ev.target)\n        if (!isPlaying && playerRef) {\n            playerRef.current.pauseVideo()\n        }\n        if (isPlaying && playerRef && test.includes('Span')) {\n            playerRef.current.playVideo()\n        }\n        dispatch({ type: ISPLAYING })\n    }\n\n    function handleNextSong() {\n        const currIndex = playSongs.indexOf(currentSong)\n        if (currIndex === playSongs.length - 1) dispatch({ type: SET_CURRENT_SONG, song: playSongs[0] })\n        else dispatch({ type: SET_CURRENT_SONG, song: playSongs[currIndex + 1] })\n    }\n\n    return <section className=\"player-bar\">\n        <div className=\"player-control\">\n            <ShuffleBtn />\n            <SkipBackBtn />\n            <button onClick={onPlayButtonClick}>\n                {isPlaying ? <span className='fa-solid pause'></span> : <PlayBtnBar />}\n            </button>\n            {currentSong && <YouTube videoId={currentSong.id || \"4m1EFMoRFvY\"} opts={opts} onReady={onReady} onStateChange={onStateChange} onProgress={onProgress} />}\n            <button onClick={handleNextSong}> <SkipForwardBtn /></button>\n            <RepeatBtn />\n        </div>\n        <div className=\"playback-bar\">\n            <small>{formatTime(currentTime)}</small>\n            <div className=\"slider-container\">\n                <input type=\"range\"\n                    min=\"0\"\n                    max={duration}\n                    step=\"0.01\"\n                    className=\"slider\"\n                    value={currentTime}\n                    onChange={handleChange} />\n                <div className=\"progress\" style={{ width: `${progressPercentage}%` }}></div>\n            </div>\n            <small>{formatTime(duration)}</small>\n        </div>\n    </section>\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}