{"ast":null,"code":"import { storageService } from './async-storage.service.js';\nimport { httpService } from './http.service.js';\nconst STORAGE_KEY = 'userDB';\nconst STORAGE_KEY_LOGGEDIN = 'loggedinUser';\nconst BASE_URL = 'auth/';\nexport const userService = {\n  login,\n  logout,\n  signup,\n  getById,\n  getLoggedinUser,\n  getUsers,\n  remove,\n  update\n};\nwindow.us = userService;\nfunction getUsers() {\n  // return storageService.query('user')\n  return httpService.get(`user`);\n}\nasync function getById(userId) {\n  // const user = await storageService.get('user', userId)\n  const user = await httpService.get(`user/${userId}`);\n\n  // socketService.emit(SOCKET_EMIT_USER_WATCH, userId)\n  // socketService.off(SOCKET_EVENT_USER_UPDATED, onUserUpdate)\n  // socketService.on(SOCKET_EVENT_USER_UPDATED, onUserUpdate)\n\n  return user;\n}\nfunction remove(userId) {\n  // return storageService.remove('user', userId)\n  return httpService.delete(`user/${userId}`);\n}\nasync function update(_ref) {\n  let {\n    _id,\n    score\n  } = _ref;\n  // const user = await storageService.get('user', _id)\n  // user.score = score\n  // await storageService.put('user', user)\n\n  const user = await httpService.put(`user/${_id}`, {\n    _id,\n    score\n  });\n  // Handle case in which admin updates other user's details\n  if (getLoggedinUser()._id === user._id) _setLoggedinUser(user);\n  return user;\n}\nfunction login(credentials) {\n  console.log('credentials:', credentials);\n  return httpService.post(BASE_URL + 'login', credentials).then(_setLoggedinUser).catch(err => {\n    console.log('err:', err);\n    throw new Error('Invalid login');\n  });\n}\nfunction signup(_ref2) {\n  let {\n    username,\n    password,\n    fullname\n  } = _ref2;\n  const user = {\n    username,\n    password,\n    fullname\n  };\n  return httpService.post(BASE_URL + 'signup', user).then(_setLoggedinUser);\n}\n\n// function updateScore(diff) {\n//     return userService.getById(getLoggedinUser()._id)\n//         .then(user => {\n//             if (user.score + diff < 0) return Promise.reject('No credit')\n//             user.score += diff\n//             return storageService.put(STORAGE_KEY, user)\n//                 .then((user) => {\n//                     _setLoggedinUser(user)\n//                     return user.score\n//                 })\n//         })\n// }\n\nfunction logout() {\n  return httpService.post(BASE_URL + 'logout').then(() => {\n    sessionStorage.removeItem(STORAGE_KEY_LOGGEDIN);\n  });\n}\nfunction getLoggedinUser() {\n  return JSON.parse(sessionStorage.getItem(STORAGE_KEY_LOGGEDIN));\n}\nfunction _setLoggedinUser(user) {\n  const userToSave = {\n    _id: user._id,\n    fullname: user.fullname\n  };\n  sessionStorage.setItem(STORAGE_KEY_LOGGEDIN, JSON.stringify(userToSave));\n  return userToSave;\n}\n\n// ;(async ()=>{\n//     await userService.signup({fullname: 'Puki Norma', username: 'puki', password:'123',score: 10000, isAdmin: false})\n//     await userService.signup({fullname: 'Master Adminov', username: 'admin', password:'123', score: 10000, isAdmin: true})\n//     await userService.signup({fullname: 'Muki G', username: 'muki', password:'123', score: 10000})\n// })()","map":{"version":3,"names":["storageService","httpService","STORAGE_KEY","STORAGE_KEY_LOGGEDIN","BASE_URL","userService","login","logout","signup","getById","getLoggedinUser","getUsers","remove","update","window","us","get","userId","user","delete","_ref","_id","score","put","_setLoggedinUser","credentials","console","log","post","then","catch","err","Error","_ref2","username","password","fullname","sessionStorage","removeItem","JSON","parse","getItem","userToSave","setItem","stringify"],"sources":["/Users/orit/Documents/CodingAcademy/spotify/frontend/src/services/user.service.js"],"sourcesContent":["import { storageService } from './async-storage.service.js'\r\nimport { httpService } from './http.service.js'\r\n\r\nconst STORAGE_KEY = 'userDB'\r\nconst STORAGE_KEY_LOGGEDIN = 'loggedinUser'\r\nconst BASE_URL = 'auth/'\r\n\r\nexport const userService = {\r\n    login,\r\n    logout,\r\n    signup,\r\n    getById,\r\n    getLoggedinUser,\r\n    getUsers,\r\n    remove,\r\n    update\r\n}\r\n\r\nwindow.us = userService\r\n\r\nfunction getUsers() {\r\n    // return storageService.query('user')\r\n    return httpService.get(`user`)\r\n}\r\n\r\nasync function getById(userId) {\r\n    // const user = await storageService.get('user', userId)\r\n    const user = await httpService.get(`user/${userId}`)\r\n\r\n    // socketService.emit(SOCKET_EMIT_USER_WATCH, userId)\r\n    // socketService.off(SOCKET_EVENT_USER_UPDATED, onUserUpdate)\r\n    // socketService.on(SOCKET_EVENT_USER_UPDATED, onUserUpdate)\r\n\r\n    return user\r\n}\r\n\r\nfunction remove(userId) {\r\n    // return storageService.remove('user', userId)\r\n    return httpService.delete(`user/${userId}`)\r\n}\r\n\r\nasync function update({ _id, score }) {\r\n    // const user = await storageService.get('user', _id)\r\n    // user.score = score\r\n    // await storageService.put('user', user)\r\n\r\n    const user = await httpService.put(`user/${_id}`, {_id, score})\r\n    // Handle case in which admin updates other user's details\r\n    if (getLoggedinUser()._id === user._id) _setLoggedinUser(user)\r\n    return user\r\n}\r\n\r\nfunction login(credentials) {\r\n    console.log('credentials:', credentials)\r\n    return httpService.post(BASE_URL + 'login', credentials)\r\n        .then(_setLoggedinUser)\r\n        .catch(err => {\r\n            console.log('err:', err)\r\n            throw new Error('Invalid login')\r\n        })\r\n}\r\n\r\nfunction signup({ username, password, fullname }) {\r\n    const user = { username, password, fullname }\r\n    return httpService.post(BASE_URL + 'signup', user)\r\n        .then(_setLoggedinUser)\r\n}\r\n\r\n// function updateScore(diff) {\r\n//     return userService.getById(getLoggedinUser()._id)\r\n//         .then(user => {\r\n//             if (user.score + diff < 0) return Promise.reject('No credit')\r\n//             user.score += diff\r\n//             return storageService.put(STORAGE_KEY, user)\r\n//                 .then((user) => {\r\n//                     _setLoggedinUser(user)\r\n//                     return user.score\r\n//                 })\r\n//         })\r\n// }\r\n\r\nfunction logout() {\r\n    return httpService.post(BASE_URL + 'logout')\r\n        .then(() => {\r\n            sessionStorage.removeItem(STORAGE_KEY_LOGGEDIN)\r\n        })\r\n}\r\n\r\nfunction getLoggedinUser() {\r\n    return JSON.parse(sessionStorage.getItem(STORAGE_KEY_LOGGEDIN))\r\n}\r\n\r\nfunction _setLoggedinUser(user) {\r\n    const userToSave = { _id: user._id, fullname: user.fullname }\r\n    sessionStorage.setItem(STORAGE_KEY_LOGGEDIN, JSON.stringify(userToSave))\r\n    return userToSave\r\n}\r\n\r\n// ;(async ()=>{\r\n//     await userService.signup({fullname: 'Puki Norma', username: 'puki', password:'123',score: 10000, isAdmin: false})\r\n//     await userService.signup({fullname: 'Master Adminov', username: 'admin', password:'123', score: 10000, isAdmin: true})\r\n//     await userService.signup({fullname: 'Muki G', username: 'muki', password:'123', score: 10000})\r\n// })()\r\n\r\n\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}