{"ast":null,"code":"import axios from \"axios\";\n// const API_KEY = process.env.REACT_APP_API_KEY\nconst API_KEY = \"AIzaSyB78sQnIs2jGHmBAwiuGLKbt9d9kpLGkU4\";\nexport const youtubeService = {\n  getVideoResults,\n  getTimeOfSong,\n  formatDuration,\n  convertDurationToSeconds,\n  getSongDuration\n};\nasync function getVideoResults(val) {\n  const results = [];\n  try {\n    const res = await axios.get(`https://www.googleapis.com/youtube/v3/search?part=snippet&videoEmbeddable=true&maxResults=5&type=video&key=${API_KEY}&q=${val}`);\n    const videos = res.data.items;\n    videos.map(video => {\n      if (video.snippet.title.includes('Trailer') || !video.snippet.title) return;\n      const song = {\n        id: video.id.videoId,\n        title: video.snippet.title,\n        imgUrl: video.snippet.thumbnails.high.url,\n        artist: video.snippet.channelTitle\n      };\n      results.push(song);\n    });\n    console.log(results);\n    return results;\n  } catch (err) {\n    console.log(err);\n    return err;\n  }\n}\nasync function getSongDuration(songId) {\n  const res = await axios.get(`https://www.googleapis.com/youtube/v3/videos?id=${vak}&part=contentDetails&key=${API_KEY}`);\n  const videoDuration = res.data.items[0].contentDetails.duration;\n  const min = videoDuration.slice(2, videoDuration.indexOf('M'));\n  let sec = videoDuration.slice(videoDuration.indexOf('M') + 1, videoDuration.indexOf('S'));\n  sec = sec.padStart(2, '0');\n  const duration = `${min}:${sec}`;\n  return duration;\n}\nasync function getTimeOfSong(val) {\n  console.log(\"val\", val);\n  const res = await axios.get(`https://www.googleapis.com/youtube/v3/videos?id=${val}&part=contentDetails&key=${API_KEY}`);\n  console.log(\"API response\", res);\n  if (res.data.items && res.data.items[0]) {\n    console.log(\"getTimeOfSong\", res.data.items[0].contentDetails.duration);\n    return res.data.items[0].contentDetails.duration;\n  } else {\n    console.error(\"Error: Unable to fetch contentDetails for the given video ID\");\n    throw new Error(\"Unable to fetch contentDetails for the given video ID\");\n  }\n}\nfunction formatDuration(isoDuration) {\n  const regex = /^PT(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+)S)?$/;\n  const matches = isoDuration.match(regex);\n  const hours = parseInt(matches[1]) || 0;\n  const minutes = parseInt(matches[2]) || 0;\n  const seconds = parseInt(matches[3]) || 0;\n  const totalMinutes = hours * 60 + minutes;\n  const formattedMinutes = totalMinutes.toString().padStart(2, '0');\n  const formattedSeconds = seconds.toString().padStart(2, '0');\n  return `${formattedMinutes}:${formattedSeconds}`;\n}\nfunction convertDurationToSeconds(duration) {\n  var match = duration.match(/PT(\\d+H)?(\\d+M)?(\\d+S)?/);\n  var hours = parseInt(match[1]) || 0;\n  var minutes = parseInt(match[2]) || 0;\n  var seconds = parseInt(match[3]) || 0;\n  return hours * 3600 + minutes * 60 + seconds;\n}","map":{"version":3,"names":["axios","API_KEY","youtubeService","getVideoResults","getTimeOfSong","formatDuration","convertDurationToSeconds","getSongDuration","val","results","res","get","videos","data","items","map","video","snippet","title","includes","song","id","videoId","imgUrl","thumbnails","high","url","artist","channelTitle","push","console","log","err","songId","vak","videoDuration","contentDetails","duration","min","slice","indexOf","sec","padStart","error","Error","isoDuration","regex","matches","match","hours","parseInt","minutes","seconds","totalMinutes","formattedMinutes","toString","formattedSeconds"],"sources":["/Users/orit/Documents/CodingAcademy/spotify/frontend/src/services/youtube.service.js"],"sourcesContent":["import axios from \"axios\"\n// const API_KEY = process.env.REACT_APP_API_KEY\nconst API_KEY = \"AIzaSyB78sQnIs2jGHmBAwiuGLKbt9d9kpLGkU4\"\nexport const youtubeService = {\n  getVideoResults,\n  getTimeOfSong,\n  formatDuration,\n  convertDurationToSeconds,\n  getSongDuration\n}\n\nasync function getVideoResults(val) {\n  const results = []\n  try {\n    const res = await axios.get(`https://www.googleapis.com/youtube/v3/search?part=snippet&videoEmbeddable=true&maxResults=5&type=video&key=${API_KEY}&q=${val}`)\n    const videos = res.data.items\n    videos.map(video => {\n      if (video.snippet.title.includes('Trailer') || !video.snippet.title) return\n      const song = {\n        id: video.id.videoId,\n        title: video.snippet.title,\n        imgUrl: video.snippet.thumbnails.high.url,\n        artist: video.snippet.channelTitle\n      }\n      results.push(song)\n    })\n    console.log(results)\n    return results\n  }\n  catch (err) {\n    console.log(err)\n    return err\n  }\n}\nasync function getSongDuration(songId) {\n  const res = await axios.get(`https://www.googleapis.com/youtube/v3/videos?id=${vak}&part=contentDetails&key=${API_KEY}`)\n  const videoDuration = res.data.items[0].contentDetails.duration\n  const min = videoDuration.slice(2, videoDuration.indexOf('M'))\n  let sec = videoDuration.slice(videoDuration.indexOf('M') + 1, videoDuration.indexOf('S'))\n  sec = sec.padStart(2, '0')\n  const duration = `${min}:${sec}`\n  return duration\n}\nasync function getTimeOfSong(val) {\n  console.log(\"val\", val)\n  const res = await axios.get(`https://www.googleapis.com/youtube/v3/videos?id=${val}&part=contentDetails&key=${API_KEY}`)\n  console.log(\"API response\", res);\n\n  if (res.data.items && res.data.items[0]) {\n    console.log(\"getTimeOfSong\", res.data.items[0].contentDetails.duration)\n    return res.data.items[0].contentDetails.duration\n  } else {\n    console.error(\"Error: Unable to fetch contentDetails for the given video ID\");\n    throw new Error(\"Unable to fetch contentDetails for the given video ID\");\n  }\n}\nfunction formatDuration(isoDuration) {\n  const regex = /^PT(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+)S)?$/;\n  const matches = isoDuration.match(regex);\n\n  const hours = parseInt(matches[1]) || 0;\n  const minutes = parseInt(matches[2]) || 0;\n  const seconds = parseInt(matches[3]) || 0;\n\n  const totalMinutes = (hours * 60) + minutes;\n  const formattedMinutes = totalMinutes.toString().padStart(2, '0');\n  const formattedSeconds = seconds.toString().padStart(2, '0');\n\n  return `${formattedMinutes}:${formattedSeconds}`\n}\nfunction convertDurationToSeconds(duration) {\n  var match = duration.match(/PT(\\d+H)?(\\d+M)?(\\d+S)?/);\n  var hours = (parseInt(match[1]) || 0);\n  var minutes = (parseInt(match[2]) || 0);\n  var seconds = (parseInt(match[3]) || 0);\n  return hours * 3600 + minutes * 60 + seconds;\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}