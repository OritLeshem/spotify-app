{"ast":null,"code":"import { store } from './store';\nimport { SET_PLAYLIST, ADD_SONG_TO_PLAYLIST, REMOVE_SONG_FROM_PLAYLIST, ADD_PLAYLIST, REMOVE_PLAYLIST, SET_PLAYLISTS, UPDATE_PLAYLIST, SET_SONGS_LIST } from './playlist.reducer';\nimport { userService } from \"../services/user.service\";\nimport { playlistService } from '../services/playlist.service';\nexport function getActionRemovePlaylist(playlistId) {\n  return {\n    type: REMOVE_PLAYLIST,\n    playlistId\n  };\n}\nexport function getActionRemoveSongFromPlaylist(playlist, songId) {\n  return {\n    type: REMOVE_SONG_FROM_PLAYLIST,\n    playlist\n  };\n}\nexport function getActionAddPlaylist(playlist) {\n  return {\n    type: ADD_PLAYLIST,\n    playlist\n  };\n}\nexport function getActionUpdatePlaylist(playlist) {\n  return {\n    type: UPDATE_PLAYLIST,\n    playlist\n  };\n}\nexport async function loadPlaylists() {\n  try {\n    const playlists = await playlistService.query();\n    store.dispatch({\n      type: SET_PLAYLISTS,\n      playlists\n    });\n  } catch (err) {\n    console.log('Cannot load playlists', err);\n    throw err;\n  }\n}\nexport async function loadPlaylistsByUser() {\n  try {\n    let playlists = await playlistService.query();\n    playlists = await playlists.filter(playlist => playlist.createdBy._id === userService.getLoggedinUser()._id);\n    console.log(playlists);\n    store.dispatch({\n      type: SET_PLAYLISTS,\n      playlists\n    });\n  } catch (err) {\n    console.log('Cannot load playlists', err);\n    throw err;\n  }\n}\nexport async function loadPlaylist(playlistId) {\n  try {\n    const playlist = await playlistService.getById(playlistId);\n    store.dispatch({\n      type: SET_PLAYLIST,\n      playlist\n    });\n    store.dispatch({\n      type: SET_SONGS_LIST,\n      playSongs: playlist.songs\n    });\n  } catch (err) {\n    console.log('cannot load playlist', err);\n    throw err;\n  }\n}\nexport async function removePlaylist(playlistId) {\n  try {\n    await playlistService.remove(playlistId);\n    store.dispatch(getActionRemovePlaylist(playlistId));\n  } catch (err) {\n    console.log('Cannot remove playlist', err);\n    throw err;\n  }\n}\nexport async function addPlaylist(playlist) {\n  try {\n    const savedPlaylist = await playlistService.save(playlist);\n    console.log('Added Playlist', savedPlaylist);\n    store.dispatch(getActionAddPlaylist(savedPlaylist));\n    return savedPlaylist;\n  } catch (err) {\n    console.log('Cannot add playlist', err);\n    throw err;\n  }\n}\nexport async function updatePlaylist(playlist) {\n  try {\n    const savedPlaylist = await playlistService.save(playlist);\n    console.log('Updated Playlist:', savedPlaylist);\n    store.dispatch(getActionUpdatePlaylist(savedPlaylist));\n    return savedPlaylist;\n  } catch (err) {\n    console.log('Cannot save playlist', err);\n    throw err;\n  }\n}\nexport async function addSonfToPlaylist(playlistId, newSong) {\n  try {\n    let newPlaylist = await playlistService.getById(playlistId);\n    newPlaylist = {\n      ...newPlaylist,\n      songs: [...newPlaylist.songs, newSong]\n    };\n    const savedPlaylist = await playlistService.save(newPlaylist);\n    console.log('Added Playlist', savedPlaylist);\n    store.dispatch({\n      type: ADD_SONG_TO_PLAYLIST,\n      playlist: savedPlaylist\n    });\n    return savedPlaylist;\n  } catch (err) {\n    console.log('Cannot add playlist', err);\n    throw err;\n  }\n}\nexport async function removeSongFromPlayList(playlistId, songId) {\n  try {\n    let playlist = await playlistService.getById(playlistId);\n    let removedSong = playlist.songs.filter(song => song.id !== songId);\n    playlist = {\n      ...playlist,\n      songs: removedSong\n    };\n    await playlistService.save(playlist);\n    store.dispatch(getActionRemoveSongFromPlaylist(playlist));\n  } catch (err) {\n    console.log('Cannot remove playlist', err);\n    throw err;\n  }\n}\nexport async function savePlaylist(playlist) {\n  const type = playlist._id ? UPDATE_PLAYLIST : ADD_PLAYLIST;\n  try {\n    const savedPlaylist = await playlistService.save(playlist);\n    store.dispatch({\n      type,\n      playlist: savedPlaylist\n    });\n    return savedPlaylist;\n  } catch (err) {\n    console.error('Cannot save playlist:', err);\n    throw err;\n  }\n}","map":{"version":3,"names":["store","SET_PLAYLIST","ADD_SONG_TO_PLAYLIST","REMOVE_SONG_FROM_PLAYLIST","ADD_PLAYLIST","REMOVE_PLAYLIST","SET_PLAYLISTS","UPDATE_PLAYLIST","SET_SONGS_LIST","userService","playlistService","getActionRemovePlaylist","playlistId","type","getActionRemoveSongFromPlaylist","playlist","songId","getActionAddPlaylist","getActionUpdatePlaylist","loadPlaylists","playlists","query","dispatch","err","console","log","loadPlaylistsByUser","filter","createdBy","_id","getLoggedinUser","loadPlaylist","getById","playSongs","songs","removePlaylist","remove","addPlaylist","savedPlaylist","save","updatePlaylist","addSonfToPlaylist","newSong","newPlaylist","removeSongFromPlayList","removedSong","song","id","savePlaylist","error"],"sources":["/Users/orit/Documents/CodingAcademy/spotify/frontend/src/store/playlist.actions.js"],"sourcesContent":["import { store } from './store'\r\nimport { SET_PLAYLIST, ADD_SONG_TO_PLAYLIST, REMOVE_SONG_FROM_PLAYLIST, ADD_PLAYLIST, REMOVE_PLAYLIST, SET_PLAYLISTS, UPDATE_PLAYLIST, SET_SONGS_LIST } from './playlist.reducer'\r\n\r\nimport { userService } from \"../services/user.service\"\r\nimport { playlistService } from '../services/playlist.service'\r\n\r\n\r\nexport function getActionRemovePlaylist(playlistId) {\r\n    return { type: REMOVE_PLAYLIST, playlistId }\r\n}\r\nexport function getActionRemoveSongFromPlaylist(playlist, songId) {\r\n    return { type: REMOVE_SONG_FROM_PLAYLIST, playlist }\r\n}\r\nexport function getActionAddPlaylist(playlist) {\r\n    return { type: ADD_PLAYLIST, playlist }\r\n}\r\nexport function getActionUpdatePlaylist(playlist) {\r\n    return { type: UPDATE_PLAYLIST, playlist }\r\n}\r\n\r\nexport async function loadPlaylists() {\r\n    try {\r\n        const playlists = await playlistService.query()\r\n        store.dispatch({ type: SET_PLAYLISTS, playlists })\r\n    } catch (err) {\r\n        console.log('Cannot load playlists', err)\r\n        throw err\r\n    }\r\n}\r\nexport async function loadPlaylistsByUser() {\r\n    try {\r\n        let playlists = await playlistService.query()\r\n        playlists = await playlists.filter(playlist => playlist.createdBy._id === userService.getLoggedinUser()._id)\r\n        console.log(playlists)\r\n        store.dispatch({ type: SET_PLAYLISTS, playlists })\r\n    } catch (err) {\r\n        console.log('Cannot load playlists', err)\r\n        throw err\r\n    }\r\n}\r\n\r\nexport async function loadPlaylist(playlistId) {\r\n    try {\r\n        const playlist = await playlistService.getById(playlistId)\r\n        store.dispatch({ type: SET_PLAYLIST, playlist })\r\n        store.dispatch({ type: SET_SONGS_LIST, playSongs: playlist.songs })\r\n    } catch (err) {\r\n        console.log('cannot load playlist', err)\r\n        throw err\r\n    }\r\n}\r\n\r\nexport async function removePlaylist(playlistId) {\r\n    try {\r\n        await playlistService.remove(playlistId)\r\n        store.dispatch(getActionRemovePlaylist(playlistId))\r\n    } catch (err) {\r\n        console.log('Cannot remove playlist', err)\r\n        throw err\r\n    }\r\n}\r\n\r\nexport async function addPlaylist(playlist) {\r\n    try {\r\n        const savedPlaylist = await playlistService.save(playlist)\r\n        console.log('Added Playlist', savedPlaylist)\r\n        store.dispatch(getActionAddPlaylist(savedPlaylist))\r\n        return savedPlaylist\r\n    } catch (err) {\r\n        console.log('Cannot add playlist', err)\r\n        throw err\r\n    }\r\n}\r\n\r\nexport async function updatePlaylist(playlist) {\r\n    try {\r\n        const savedPlaylist = await playlistService.save(playlist)\r\n        console.log('Updated Playlist:', savedPlaylist)\r\n        store.dispatch(getActionUpdatePlaylist(savedPlaylist))\r\n        return savedPlaylist\r\n    } catch (err) {\r\n        console.log('Cannot save playlist', err)\r\n        throw err\r\n    }\r\n}\r\n\r\nexport async function addSonfToPlaylist(playlistId, newSong) {\r\n    try {\r\n        let newPlaylist = await playlistService.getById(playlistId)\r\n        newPlaylist = { ...newPlaylist, songs: [...newPlaylist.songs, newSong] }\r\n        const savedPlaylist = await playlistService.save(newPlaylist)\r\n        console.log('Added Playlist', savedPlaylist)\r\n        store.dispatch({ type: ADD_SONG_TO_PLAYLIST, playlist: savedPlaylist })\r\n        return savedPlaylist\r\n    } catch (err) {\r\n        console.log('Cannot add playlist', err)\r\n        throw err\r\n    }\r\n}\r\n\r\nexport async function removeSongFromPlayList(playlistId, songId) {\r\n    try {\r\n        let playlist = await playlistService.getById(playlistId)\r\n        let removedSong = playlist.songs.filter(song => song.id !== songId)\r\n        playlist = { ...playlist, songs: removedSong }\r\n        await playlistService.save(playlist)\r\n        store.dispatch(getActionRemoveSongFromPlaylist(playlist))\r\n    } catch (err) {\r\n        console.log('Cannot remove playlist', err)\r\n        throw err\r\n    }\r\n}\r\n\r\nexport async function savePlaylist(playlist) {\r\n    const type = (playlist._id) ? UPDATE_PLAYLIST : ADD_PLAYLIST\r\n    try {\r\n        const savedPlaylist = await playlistService.save(playlist)\r\n        store.dispatch({ type, playlist: savedPlaylist })\r\n        return savedPlaylist\r\n    }\r\n    catch (err) {\r\n        console.error('Cannot save playlist:', err)\r\n        throw err\r\n    }\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}