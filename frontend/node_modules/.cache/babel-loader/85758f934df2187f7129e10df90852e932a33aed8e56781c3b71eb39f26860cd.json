{"ast":null,"code":"import { storageService } from './async-storage.service.js';\nimport { showErrorMsg } from './event-bus.service';\nimport { httpService } from './http.service.js';\nimport { utilService } from './util.service.js';\nconst USER_KEY = 'userDB';\n// _createUsers()\nconst STORAGE_KEY_LOGGEDIN_USER = 'loggedinUser';\nexport const userService = {\n  getById,\n  // remove,\n  signup,\n  login,\n  logout,\n  getEmptyCredentials,\n  getLoggedinUser\n};\nfunction getById(userId) {\n  return httpService.get(`user/${userId}`);\n}\n\n// function remove(userId) {\n//   return storageService.remove(USER_KEY, userId)\n// }\n\n// function signup(credentials) {\n//   return storageService.query(USER_KEY)\n//     .then(users => {\n//       const existingUser = users.find(u => u.username === credentials.username)\n//       if (existingUser) {\n//         showErrorMsg('Username already exists, pick another one')\n//         return Promise.reject('Username already exists')\n//       } else {\n//         return storageService.post(USER_KEY, credentials)\n//           .then((user) => {\n//             _saveLoggedinUser(user)\n//             return user\n//           })\n//       }\n//     })\n// }\nasync function signup(userCred) {\n  const user = await httpService.post('auth/signup', userCred);\n  return saveLocalUser(user);\n}\nfunction saveLocalUser(user) {\n  user = {\n    _id: user._id,\n    username: user.username\n  };\n  sessionStorage.setItem(STORAGE_KEY_LOGGEDIN_USER, JSON.stringify(user));\n  return user;\n}\nasync function login(userCred) {\n  const user = await httpService.post('auth/login', userCred);\n  if (user) {\n    return saveLocalUser(user);\n  }\n}\nasync function logout() {\n  sessionStorage.removeItem(STORAGE_KEY_LOGGEDIN_USER);\n  return await httpService.post('auth/logout');\n}\n\n// function login(credentials) {\n//   return storageService.query(USER_KEY)\n//     .then(users => {\n//       const user = users.find(u => u.username === credentials.username)\n//       if (!user) {\n//         showErrorMsg(\"Username doesn't exist, Login failed\")\n//         return Promise.reject(\"Username doesn't exist, Login failed\")\n//       }\n//       _saveLoggedinUser(user)\n//       return user\n//     })\n// }\n\nfunction getEmptyCredentials() {\n  let username = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  return {\n    username\n  };\n}\nfunction getLoggedinUser() {\n  console.log(JSON.parse(sessionStorage.getItem('loggedinUser') || null));\n  return JSON.parse(sessionStorage.getItem('loggedinUser') || null);\n}\n\n// function logout() {\n//   sessionStorage.removeItem('loggedinUser')\n//   return Promise.resolve()\n// }\n\n// function _saveLoggedinUser(user) {\n//   sessionStorage.setItem('loggedinUser', JSON.stringify(user))\n// }\n\n// function _createUsers() {\n//   let users = utilService.loadFromStorage(USER_KEY)\n//   if (!users || !users.length) {\n//     users = []\n//     users.push(_createUser('muki'))\n//     users.push(_createUser('puki'))\n\n//     utilService.saveToStorage(USER_KEY, users)\n//   }\n// }\n\n// function _createUser(username) {\n//   const user = getEmptyCredentials(username)\n//   user._id = utilService.makeId()\n//   return user\n// }\n//     update\n// }\n\n// window.us = userService\n\n// function getUsers() {\n//     // return storageService.query('user')\n//     return httpService.get(`user`)\n// }\n\n// async function getById(userId) {\n//     // const user = await storageService.get('user', userId)\n//     const user = await httpService.get(`user/${userId}`)\n\n//     // socketService.emit(SOCKET_EMIT_USER_WATCH, userId)\n//     // socketService.off(SOCKET_EVENT_USER_UPDATED, onUserUpdate)\n//     // socketService.on(SOCKET_EVENT_USER_UPDATED, onUserUpdate)\n\n//     return user\n// }\n\n// function remove(userId) {\n//     // return storageService.remove('user', userId)\n//     return httpService.delete(`user/${userId}`)\n// }\n\n// async function update({ _id, score }) {\n//     // const user = await storageService.get('user', _id)\n//     // user.score = score\n//     // await storageService.put('user', user)\n\n//     const user = await httpService.put(`user/${_id}`, { _id, score })\n//     // Handle case in which admin updates other user's details\n//     if (getLoggedinUser()._id === user._id) _setLoggedinUser(user)\n//     return user\n// }\n\n// function login(credentials) {\n//     console.log('credentials:', credentials)\n//     return httpService.post(BASE_URL + 'login', credentials)\n//         .then(_setLoggedinUser)\n//         .catch(err => {\n//             console.log('err:', err)\n//             throw new Error('Invalid login')\n//         })\n// }\n\n// function signup({ username }) {\n//     const user = { username }\n//     return httpService.post(BASE_URL + 'signup', user)\n//         .then(_setLoggedinUser)\n// }\n\n// function logout() {\n//     return httpService.post(BASE_URL + 'logout')\n//         .then(() => {\n//             sessionStorage.removeItem(STORAGE_KEY_LOGGEDIN)\n//         })\n// }\n\n// function getLoggedinUser() {\n//     return JSON.parse(sessionStorage.getItem(STORAGE_KEY_LOGGEDIN))\n// }\n\n// function _setLoggedinUser(user) {\n//     const userToSave = { _id: user._id, username: user.username }\n//     sessionStorage.setItem(STORAGE_KEY_LOGGEDIN, JSON.stringify(userToSave))\n//     return userToSave\n// }","map":{"version":3,"names":["storageService","showErrorMsg","httpService","utilService","USER_KEY","STORAGE_KEY_LOGGEDIN_USER","userService","getById","signup","login","logout","getEmptyCredentials","getLoggedinUser","userId","get","userCred","user","post","saveLocalUser","_id","username","sessionStorage","setItem","JSON","stringify","removeItem","arguments","length","undefined","console","log","parse","getItem"],"sources":["/Users/orit/Documents/CodingAcademy/spotify/frontend/src/services/user.service.js"],"sourcesContent":["\r\nimport { storageService } from './async-storage.service.js'\r\nimport { showErrorMsg } from './event-bus.service'\r\nimport { httpService } from './http.service.js'\r\nimport { utilService } from './util.service.js'\r\n\r\nconst USER_KEY = 'userDB'\r\n// _createUsers()\r\nconst STORAGE_KEY_LOGGEDIN_USER = 'loggedinUser'\r\n\r\nexport const userService = {\r\n  getById,\r\n  // remove,\r\n  signup,\r\n  login,\r\n  logout,\r\n  getEmptyCredentials,\r\n  getLoggedinUser,\r\n}\r\n\r\n\r\nfunction getById(userId) {\r\n  return httpService.get(`user/${userId}`)\r\n}\r\n\r\n// function remove(userId) {\r\n//   return storageService.remove(USER_KEY, userId)\r\n// }\r\n\r\n// function signup(credentials) {\r\n//   return storageService.query(USER_KEY)\r\n//     .then(users => {\r\n//       const existingUser = users.find(u => u.username === credentials.username)\r\n//       if (existingUser) {\r\n//         showErrorMsg('Username already exists, pick another one')\r\n//         return Promise.reject('Username already exists')\r\n//       } else {\r\n//         return storageService.post(USER_KEY, credentials)\r\n//           .then((user) => {\r\n//             _saveLoggedinUser(user)\r\n//             return user\r\n//           })\r\n//       }\r\n//     })\r\n// }\r\nasync function signup(userCred) {\r\n  const user = await httpService.post('auth/signup', userCred)\r\n  return saveLocalUser(user)\r\n}\r\nfunction saveLocalUser(user) {\r\n  user = { _id: user._id, username: user.username }\r\n  sessionStorage.setItem(STORAGE_KEY_LOGGEDIN_USER, JSON.stringify(user))\r\n  return user\r\n}\r\n\r\nasync function login(userCred) {\r\n\r\n  const user = await httpService.post('auth/login', userCred)\r\n  if (user) {\r\n    return saveLocalUser(user)\r\n  }\r\n}\r\nasync function logout() {\r\n  sessionStorage.removeItem(STORAGE_KEY_LOGGEDIN_USER)\r\n  return await httpService.post('auth/logout')\r\n}\r\n\r\n// function login(credentials) {\r\n//   return storageService.query(USER_KEY)\r\n//     .then(users => {\r\n//       const user = users.find(u => u.username === credentials.username)\r\n//       if (!user) {\r\n//         showErrorMsg(\"Username doesn't exist, Login failed\")\r\n//         return Promise.reject(\"Username doesn't exist, Login failed\")\r\n//       }\r\n//       _saveLoggedinUser(user)\r\n//       return user\r\n//     })\r\n// }\r\n\r\nfunction getEmptyCredentials(username = '') {\r\n  return { username }\r\n}\r\n\r\nfunction getLoggedinUser() {\r\n  console.log(JSON.parse(sessionStorage.getItem('loggedinUser') || null))\r\n  return JSON.parse(sessionStorage.getItem('loggedinUser') || null)\r\n}\r\n\r\n// function logout() {\r\n//   sessionStorage.removeItem('loggedinUser')\r\n//   return Promise.resolve()\r\n// }\r\n\r\n// function _saveLoggedinUser(user) {\r\n//   sessionStorage.setItem('loggedinUser', JSON.stringify(user))\r\n// }\r\n\r\n\r\n// function _createUsers() {\r\n//   let users = utilService.loadFromStorage(USER_KEY)\r\n//   if (!users || !users.length) {\r\n//     users = []\r\n//     users.push(_createUser('muki'))\r\n//     users.push(_createUser('puki'))\r\n\r\n//     utilService.saveToStorage(USER_KEY, users)\r\n//   }\r\n// }\r\n\r\n// function _createUser(username) {\r\n//   const user = getEmptyCredentials(username)\r\n//   user._id = utilService.makeId()\r\n//   return user\r\n// }\r\n//     update\r\n// }\r\n\r\n// window.us = userService\r\n\r\n// function getUsers() {\r\n//     // return storageService.query('user')\r\n//     return httpService.get(`user`)\r\n// }\r\n\r\n// async function getById(userId) {\r\n//     // const user = await storageService.get('user', userId)\r\n//     const user = await httpService.get(`user/${userId}`)\r\n\r\n//     // socketService.emit(SOCKET_EMIT_USER_WATCH, userId)\r\n//     // socketService.off(SOCKET_EVENT_USER_UPDATED, onUserUpdate)\r\n//     // socketService.on(SOCKET_EVENT_USER_UPDATED, onUserUpdate)\r\n\r\n//     return user\r\n// }\r\n\r\n// function remove(userId) {\r\n//     // return storageService.remove('user', userId)\r\n//     return httpService.delete(`user/${userId}`)\r\n// }\r\n\r\n// async function update({ _id, score }) {\r\n//     // const user = await storageService.get('user', _id)\r\n//     // user.score = score\r\n//     // await storageService.put('user', user)\r\n\r\n//     const user = await httpService.put(`user/${_id}`, { _id, score })\r\n//     // Handle case in which admin updates other user's details\r\n//     if (getLoggedinUser()._id === user._id) _setLoggedinUser(user)\r\n//     return user\r\n// }\r\n\r\n// function login(credentials) {\r\n//     console.log('credentials:', credentials)\r\n//     return httpService.post(BASE_URL + 'login', credentials)\r\n//         .then(_setLoggedinUser)\r\n//         .catch(err => {\r\n//             console.log('err:', err)\r\n//             throw new Error('Invalid login')\r\n//         })\r\n// }\r\n\r\n// function signup({ username }) {\r\n//     const user = { username }\r\n//     return httpService.post(BASE_URL + 'signup', user)\r\n//         .then(_setLoggedinUser)\r\n// }\r\n\r\n\r\n\r\n// function logout() {\r\n//     return httpService.post(BASE_URL + 'logout')\r\n//         .then(() => {\r\n//             sessionStorage.removeItem(STORAGE_KEY_LOGGEDIN)\r\n//         })\r\n// }\r\n\r\n// function getLoggedinUser() {\r\n//     return JSON.parse(sessionStorage.getItem(STORAGE_KEY_LOGGEDIN))\r\n// }\r\n\r\n// function _setLoggedinUser(user) {\r\n//     const userToSave = { _id: user._id, username: user.username }\r\n//     sessionStorage.setItem(STORAGE_KEY_LOGGEDIN, JSON.stringify(userToSave))\r\n//     return userToSave\r\n// }\r\n\r\n\r\n\r\n\r\n"],"mappings":"AACA,SAASA,cAAc,QAAQ,4BAA4B;AAC3D,SAASC,YAAY,QAAQ,qBAAqB;AAClD,SAASC,WAAW,QAAQ,mBAAmB;AAC/C,SAASC,WAAW,QAAQ,mBAAmB;AAE/C,MAAMC,QAAQ,GAAG,QAAQ;AACzB;AACA,MAAMC,yBAAyB,GAAG,cAAc;AAEhD,OAAO,MAAMC,WAAW,GAAG;EACzBC,OAAO;EACP;EACAC,MAAM;EACNC,KAAK;EACLC,MAAM;EACNC,mBAAmB;EACnBC;AACF,CAAC;AAGD,SAASL,OAAOA,CAACM,MAAM,EAAE;EACvB,OAAOX,WAAW,CAACY,GAAG,CAAE,QAAOD,MAAO,EAAC,CAAC;AAC1C;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAeL,MAAMA,CAACO,QAAQ,EAAE;EAC9B,MAAMC,IAAI,GAAG,MAAMd,WAAW,CAACe,IAAI,CAAC,aAAa,EAAEF,QAAQ,CAAC;EAC5D,OAAOG,aAAa,CAACF,IAAI,CAAC;AAC5B;AACA,SAASE,aAAaA,CAACF,IAAI,EAAE;EAC3BA,IAAI,GAAG;IAAEG,GAAG,EAAEH,IAAI,CAACG,GAAG;IAAEC,QAAQ,EAAEJ,IAAI,CAACI;EAAS,CAAC;EACjDC,cAAc,CAACC,OAAO,CAACjB,yBAAyB,EAAEkB,IAAI,CAACC,SAAS,CAACR,IAAI,CAAC,CAAC;EACvE,OAAOA,IAAI;AACb;AAEA,eAAeP,KAAKA,CAACM,QAAQ,EAAE;EAE7B,MAAMC,IAAI,GAAG,MAAMd,WAAW,CAACe,IAAI,CAAC,YAAY,EAAEF,QAAQ,CAAC;EAC3D,IAAIC,IAAI,EAAE;IACR,OAAOE,aAAa,CAACF,IAAI,CAAC;EAC5B;AACF;AACA,eAAeN,MAAMA,CAAA,EAAG;EACtBW,cAAc,CAACI,UAAU,CAACpB,yBAAyB,CAAC;EACpD,OAAO,MAAMH,WAAW,CAACe,IAAI,CAAC,aAAa,CAAC;AAC9C;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASN,mBAAmBA,CAAA,EAAgB;EAAA,IAAfS,QAAQ,GAAAM,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,EAAE;EACxC,OAAO;IAAEN;EAAS,CAAC;AACrB;AAEA,SAASR,eAAeA,CAAA,EAAG;EACzBiB,OAAO,CAACC,GAAG,CAACP,IAAI,CAACQ,KAAK,CAACV,cAAc,CAACW,OAAO,CAAC,cAAc,CAAC,IAAI,IAAI,CAAC,CAAC;EACvE,OAAOT,IAAI,CAACQ,KAAK,CAACV,cAAc,CAACW,OAAO,CAAC,cAAc,CAAC,IAAI,IAAI,CAAC;AACnE;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}