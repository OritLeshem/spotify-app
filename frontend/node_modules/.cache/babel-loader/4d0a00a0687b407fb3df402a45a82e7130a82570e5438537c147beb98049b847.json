{"ast":null,"code":"import { utilService } from './util.service.js';\nimport { storageService } from './async-storage.service.js';\nimport { showErrorMsg, showSuccessMsg } from './event-bus.service';\nconst USER_KEY = 'userDB';\n_createUsers();\nexport const userService = {\n  getById,\n  remove,\n  signup,\n  login,\n  logout,\n  getEmptyCredentials,\n  getLoggedinUser\n};\nfunction getById(userId) {\n  return storageService.get(USER_KEY, userId);\n}\nfunction remove(userId) {\n  return storageService.remove(USER_KEY, userId);\n}\nfunction signup(credentials) {\n  return storageService.query(USER_KEY).then(users => {\n    const existingUser = users.find(u => u.username === credentials.username);\n    if (existingUser) {\n      showErrorMsg('Username already exists,pick another one');\n      return Promise.reject('Username already exists');\n    } else {\n      return storageService.post(USER_KEY, credentials).then(user => {\n        _saveLoggedinUser(user);\n        return user;\n      });\n    }\n  });\n}\nfunction login(credentials) {\n  return storageService.query(USER_KEY).then(users => {\n    const user = users.find(u => u.username === credentials.username);\n    if (!user) {\n      showErrorMsg(\"Username doesn't exist, Login failed\");\n      return Promise.reject(\"Username doesn't exist, Login failed\");\n    }\n    _saveLoggedinUser(user);\n    return user;\n  });\n}\nfunction getEmptyCredentials() {\n  let username = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  return {\n    username\n  };\n}\nfunction getLoggedinUser() {\n  console.log(JSON.parse(sessionStorage.getItem('loggedinUser') || null));\n  return JSON.parse(sessionStorage.getItem('loggedinUser') || null);\n}\nfunction logout() {\n  sessionStorage.removeItem('loggedinUser');\n  return Promise.resolve();\n}\nfunction _saveLoggedinUser(user) {\n  sessionStorage.setItem('loggedinUser', JSON.stringify(user));\n}\nfunction _createUsers() {\n  let users = utilService.loadFromStorage(USER_KEY);\n  if (!users || !users.length) {\n    users = [];\n    users.push(_createUser('muki'));\n    users.push(_createUser('puki'));\n    utilService.saveToStorage(USER_KEY, users);\n  }\n}\nfunction _createUser(username) {\n  const user = getEmptyCredentials(username);\n  user._id = utilService.makeId();\n  return user;\n}","map":{"version":3,"names":["utilService","storageService","showErrorMsg","showSuccessMsg","USER_KEY","_createUsers","userService","getById","remove","signup","login","logout","getEmptyCredentials","getLoggedinUser","userId","get","credentials","query","then","users","existingUser","find","u","username","Promise","reject","post","user","_saveLoggedinUser","arguments","length","undefined","console","log","JSON","parse","sessionStorage","getItem","removeItem","resolve","setItem","stringify","loadFromStorage","push","_createUser","saveToStorage","_id","makeId"],"sources":["/Users/orit/Documents/CodingAcademy/spotify/frontend/src/services/user.service.local.js"],"sourcesContent":["import { utilService } from './util.service.js'\r\nimport { storageService } from './async-storage.service.js'\r\nimport { showErrorMsg, showSuccessMsg } from './event-bus.service'\r\n\r\nconst USER_KEY = 'userDB'\r\n_createUsers()\r\n\r\nexport const userService = {\r\n    getById,\r\n    remove,\r\n    signup,\r\n    login,\r\n    logout,\r\n    getEmptyCredentials,\r\n    getLoggedinUser,\r\n}\r\n\r\n\r\nfunction getById(userId) {\r\n    return storageService.get(USER_KEY, userId)\r\n}\r\n\r\nfunction remove(userId) {\r\n    return storageService.remove(USER_KEY, userId)\r\n}\r\n\r\nfunction signup(credentials) {\r\n    return storageService.query(USER_KEY)\r\n        .then(users => {\r\n            const existingUser = users.find(u => u.username === credentials.username)\r\n            if (existingUser) {\r\n                showErrorMsg('Username already exists,pick another one')\r\n                return Promise.reject('Username already exists')\r\n            } else {\r\n                return storageService.post(USER_KEY, credentials)\r\n                    .then((user) => {\r\n                        _saveLoggedinUser(user)\r\n                        return user\r\n                    })\r\n            }\r\n        })\r\n}\r\n\r\nfunction login(credentials) {\r\n    return storageService.query(USER_KEY)\r\n        .then(users => {\r\n            const user = users.find(u => u.username === credentials.username)\r\n            if (!user) {\r\n                showErrorMsg(\"Username doesn't exist, Login failed\")\r\n                return Promise.reject(\"Username doesn't exist, Login failed\")\r\n            }\r\n            _saveLoggedinUser(user)\r\n            return user\r\n        })\r\n}\r\n\r\nfunction getEmptyCredentials(username = '') {\r\n    return { username }\r\n}\r\n\r\nfunction getLoggedinUser() {\r\n    console.log(JSON.parse(sessionStorage.getItem('loggedinUser') || null))\r\n    return JSON.parse(sessionStorage.getItem('loggedinUser') || null)\r\n}\r\n\r\nfunction logout() {\r\n    sessionStorage.removeItem('loggedinUser')\r\n    return Promise.resolve()\r\n}\r\n\r\nfunction _saveLoggedinUser(user) {\r\n    sessionStorage.setItem('loggedinUser', JSON.stringify(user))\r\n}\r\n\r\n\r\nfunction _createUsers() {\r\n    let users = utilService.loadFromStorage(USER_KEY)\r\n    if (!users || !users.length) {\r\n        users = []\r\n        users.push(_createUser('muki'))\r\n        users.push(_createUser('puki'))\r\n\r\n        utilService.saveToStorage(USER_KEY, users)\r\n    }\r\n}\r\n\r\nfunction _createUser(username) {\r\n    const user = getEmptyCredentials(username)\r\n    user._id = utilService.makeId()\r\n    return user\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}