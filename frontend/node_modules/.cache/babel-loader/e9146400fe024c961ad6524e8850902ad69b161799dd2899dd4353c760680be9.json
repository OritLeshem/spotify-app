{"ast":null,"code":"// import { storageService } from './async-storage.service.js'\n// import { httpService } from './http.service.js'\n\n// const STORAGE_KEY = 'userDB'\n// const STORAGE_KEY_LOGGEDIN = 'loggedinUser'\n// const BASE_URL = 'auth/'\n\n// export const userService = {\n//     login,\n//     logout,\n//     signup,\n//     getById,\n//     getLoggedinUser,\n//     getUsers,\n//     remove,\n//     update\n// }\n\n// window.us = userService\n\n// function getUsers() {\n//     // return storageService.query('user')\n//     return httpService.get(`user`)\n// }\n\n// async function getById(userId) {\n//     // const user = await storageService.get('user', userId)\n//     const user = await httpService.get(`user/${userId}`)\n\n//     // socketService.emit(SOCKET_EMIT_USER_WATCH, userId)\n//     // socketService.off(SOCKET_EVENT_USER_UPDATED, onUserUpdate)\n//     // socketService.on(SOCKET_EVENT_USER_UPDATED, onUserUpdate)\n\n//     return user\n// }\n\n// function remove(userId) {\n//     // return storageService.remove('user', userId)\n//     return httpService.delete(`user/${userId}`)\n// }\n\n// async function update({ _id, score }) {\n//     // const user = await storageService.get('user', _id)\n//     // user.score = score\n//     // await storageService.put('user', user)\n\n//     const user = await httpService.put(`user/${_id}`, { _id, score })\n//     // Handle case in which admin updates other user's details\n//     if (getLoggedinUser()._id === user._id) _setLoggedinUser(user)\n//     return user\n// }\n\n// function login(credentials) {\n//     console.log('credentials:', credentials)\n//     return httpService.post(BASE_URL + 'login', credentials)\n//         .then(_setLoggedinUser)\n//         .catch(err => {\n//             console.log('err:', err)\n//             throw new Error('Invalid login')\n//         })\n// }\n\n// function signup({ username }) {\n//     const user = { username }\n//     return httpService.post(BASE_URL + 'signup', user)\n//         .then(_setLoggedinUser)\n// }\n\n// function logout() {\n//     return httpService.post(BASE_URL + 'logout')\n//         .then(() => {\n//             sessionStorage.removeItem(STORAGE_KEY_LOGGEDIN)\n//         })\n// }\n\n// function getLoggedinUser() {\n//     return JSON.parse(sessionStorage.getItem(STORAGE_KEY_LOGGEDIN))\n// }\n\n// function _setLoggedinUser(user) {\n//     const userToSave = { _id: user._id, username: user.username }\n//     sessionStorage.setItem(STORAGE_KEY_LOGGEDIN, JSON.stringify(userToSave))\n//     return userToSave\n// }","map":{"version":3,"names":[],"sources":["/Users/orit/Documents/CodingAcademy/spotify/frontend/src/services/user.service.js"],"sourcesContent":["// import { storageService } from './async-storage.service.js'\r\n// import { httpService } from './http.service.js'\r\n\r\n// const STORAGE_KEY = 'userDB'\r\n// const STORAGE_KEY_LOGGEDIN = 'loggedinUser'\r\n// const BASE_URL = 'auth/'\r\n\r\n// export const userService = {\r\n//     login,\r\n//     logout,\r\n//     signup,\r\n//     getById,\r\n//     getLoggedinUser,\r\n//     getUsers,\r\n//     remove,\r\n//     update\r\n// }\r\n\r\n// window.us = userService\r\n\r\n// function getUsers() {\r\n//     // return storageService.query('user')\r\n//     return httpService.get(`user`)\r\n// }\r\n\r\n// async function getById(userId) {\r\n//     // const user = await storageService.get('user', userId)\r\n//     const user = await httpService.get(`user/${userId}`)\r\n\r\n//     // socketService.emit(SOCKET_EMIT_USER_WATCH, userId)\r\n//     // socketService.off(SOCKET_EVENT_USER_UPDATED, onUserUpdate)\r\n//     // socketService.on(SOCKET_EVENT_USER_UPDATED, onUserUpdate)\r\n\r\n//     return user\r\n// }\r\n\r\n// function remove(userId) {\r\n//     // return storageService.remove('user', userId)\r\n//     return httpService.delete(`user/${userId}`)\r\n// }\r\n\r\n// async function update({ _id, score }) {\r\n//     // const user = await storageService.get('user', _id)\r\n//     // user.score = score\r\n//     // await storageService.put('user', user)\r\n\r\n//     const user = await httpService.put(`user/${_id}`, { _id, score })\r\n//     // Handle case in which admin updates other user's details\r\n//     if (getLoggedinUser()._id === user._id) _setLoggedinUser(user)\r\n//     return user\r\n// }\r\n\r\n// function login(credentials) {\r\n//     console.log('credentials:', credentials)\r\n//     return httpService.post(BASE_URL + 'login', credentials)\r\n//         .then(_setLoggedinUser)\r\n//         .catch(err => {\r\n//             console.log('err:', err)\r\n//             throw new Error('Invalid login')\r\n//         })\r\n// }\r\n\r\n// function signup({ username }) {\r\n//     const user = { username }\r\n//     return httpService.post(BASE_URL + 'signup', user)\r\n//         .then(_setLoggedinUser)\r\n// }\r\n\r\n\r\n\r\n// function logout() {\r\n//     return httpService.post(BASE_URL + 'logout')\r\n//         .then(() => {\r\n//             sessionStorage.removeItem(STORAGE_KEY_LOGGEDIN)\r\n//         })\r\n// }\r\n\r\n// function getLoggedinUser() {\r\n//     return JSON.parse(sessionStorage.getItem(STORAGE_KEY_LOGGEDIN))\r\n// }\r\n\r\n// function _setLoggedinUser(user) {\r\n//     const userToSave = { _id: user._id, username: user.username }\r\n//     sessionStorage.setItem(STORAGE_KEY_LOGGEDIN, JSON.stringify(userToSave))\r\n//     return userToSave\r\n// }\r\n\r\n\r\n\r\n\r\n"],"mappings":"AAAA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}