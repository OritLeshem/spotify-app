{"ast":null,"code":"import _regeneratorRuntime from\"/Users/orit/Documents/CodingAcademy/spotify/frontend/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";import _asyncToGenerator from\"/Users/orit/Documents/CodingAcademy/spotify/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import{storageService}from'./async-storage.service.js';import{showErrorMsg}from'./event-bus.service';import{httpService}from'./http.service.js';import{utilService}from'./util.service.js';var USER_KEY='userDB';// _createUsers()\nvar STORAGE_KEY_LOGGEDIN_USER='loggedinUser';export var userService={getById:getById,// remove,\nsignup:signup,login:login,logout:logout,getEmptyCredentials:getEmptyCredentials,getLoggedinUser:getLoggedinUser};function getById(userId){return httpService.get(\"user/\".concat(userId));}// function remove(userId) {\n//   return storageService.remove(USER_KEY, userId)\n// }\n// function signup(credentials) {\n//   return storageService.query(USER_KEY)\n//     .then(users => {\n//       const existingUser = users.find(u => u.username === credentials.username)\n//       if (existingUser) {\n//         showErrorMsg('Username already exists, pick another one')\n//         return Promise.reject('Username already exists')\n//       } else {\n//         return storageService.post(USER_KEY, credentials)\n//           .then((user) => {\n//             _saveLoggedinUser(user)\n//             return user\n//           })\n//       }\n//     })\n// }\nfunction signup(_x){return _signup.apply(this,arguments);}function _signup(){_signup=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(userCred){var user;return _regeneratorRuntime().wrap(function _callee$(_context){while(1)switch(_context.prev=_context.next){case 0:_context.next=2;return httpService.post('auth/signup',userCred);case 2:user=_context.sent;return _context.abrupt(\"return\",saveLocalUser(user));case 4:case\"end\":return _context.stop();}},_callee);}));return _signup.apply(this,arguments);}function saveLocalUser(user){user={_id:user._id,username:user.username};sessionStorage.setItem(STORAGE_KEY_LOGGEDIN_USER,JSON.stringify(user));return user;}function login(_x2){return _login.apply(this,arguments);}function _login(){_login=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2(userCred){var user;return _regeneratorRuntime().wrap(function _callee2$(_context2){while(1)switch(_context2.prev=_context2.next){case 0:_context2.next=2;return httpService.post('auth/login',userCred);case 2:user=_context2.sent;if(!user){_context2.next=5;break;}return _context2.abrupt(\"return\",saveLocalUser(user));case 5:case\"end\":return _context2.stop();}},_callee2);}));return _login.apply(this,arguments);}function logout(){return _logout.apply(this,arguments);}// function login(credentials) {\n//   return storageService.query(USER_KEY)\n//     .then(users => {\n//       const user = users.find(u => u.username === credentials.username)\n//       if (!user) {\n//         showErrorMsg(\"Username doesn't exist, Login failed\")\n//         return Promise.reject(\"Username doesn't exist, Login failed\")\n//       }\n//       _saveLoggedinUser(user)\n//       return user\n//     })\n// }\nfunction _logout(){_logout=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee3(){return _regeneratorRuntime().wrap(function _callee3$(_context3){while(1)switch(_context3.prev=_context3.next){case 0:sessionStorage.removeItem(STORAGE_KEY_LOGGEDIN_USER);_context3.next=3;return httpService.post('auth/logout');case 3:return _context3.abrupt(\"return\",_context3.sent);case 4:case\"end\":return _context3.stop();}},_callee3);}));return _logout.apply(this,arguments);}function getEmptyCredentials(){var username=arguments.length>0&&arguments[0]!==undefined?arguments[0]:'';return{username:username};}function getLoggedinUser(){console.log(JSON.parse(sessionStorage.getItem('loggedinUser')||null));return JSON.parse(sessionStorage.getItem('loggedinUser')||null);}// function logout() {\n//   sessionStorage.removeItem('loggedinUser')\n//   return Promise.resolve()\n// }\n// function _saveLoggedinUser(user) {\n//   sessionStorage.setItem('loggedinUser', JSON.stringify(user))\n// }\n// function _createUsers() {\n//   let users = utilService.loadFromStorage(USER_KEY)\n//   if (!users || !users.length) {\n//     users = []\n//     users.push(_createUser('muki'))\n//     users.push(_createUser('puki'))\n//     utilService.saveToStorage(USER_KEY, users)\n//   }\n// }\n// function _createUser(username) {\n//   const user = getEmptyCredentials(username)\n//   user._id = utilService.makeId()\n//   return user\n// }\n//     update\n// }\n// window.us = userService\n// function getUsers() {\n//     // return storageService.query('user')\n//     return httpService.get(`user`)\n// }\n// async function getById(userId) {\n//     // const user = await storageService.get('user', userId)\n//     const user = await httpService.get(`user/${userId}`)\n//     // socketService.emit(SOCKET_EMIT_USER_WATCH, userId)\n//     // socketService.off(SOCKET_EVENT_USER_UPDATED, onUserUpdate)\n//     // socketService.on(SOCKET_EVENT_USER_UPDATED, onUserUpdate)\n//     return user\n// }\n// function remove(userId) {\n//     // return storageService.remove('user', userId)\n//     return httpService.delete(`user/${userId}`)\n// }\n// async function update({ _id, score }) {\n//     // const user = await storageService.get('user', _id)\n//     // user.score = score\n//     // await storageService.put('user', user)\n//     const user = await httpService.put(`user/${_id}`, { _id, score })\n//     // Handle case in which admin updates other user's details\n//     if (getLoggedinUser()._id === user._id) _setLoggedinUser(user)\n//     return user\n// }\n// function login(credentials) {\n//     console.log('credentials:', credentials)\n//     return httpService.post(BASE_URL + 'login', credentials)\n//         .then(_setLoggedinUser)\n//         .catch(err => {\n//             console.log('err:', err)\n//             throw new Error('Invalid login')\n//         })\n// }\n// function signup({ username }) {\n//     const user = { username }\n//     return httpService.post(BASE_URL + 'signup', user)\n//         .then(_setLoggedinUser)\n// }\n// function logout() {\n//     return httpService.post(BASE_URL + 'logout')\n//         .then(() => {\n//             sessionStorage.removeItem(STORAGE_KEY_LOGGEDIN)\n//         })\n// }\n// function getLoggedinUser() {\n//     return JSON.parse(sessionStorage.getItem(STORAGE_KEY_LOGGEDIN))\n// }\n// function _setLoggedinUser(user) {\n//     const userToSave = { _id: user._id, username: user.username }\n//     sessionStorage.setItem(STORAGE_KEY_LOGGEDIN, JSON.stringify(userToSave))\n//     return userToSave\n// }","map":{"version":3,"names":["storageService","showErrorMsg","httpService","utilService","USER_KEY","STORAGE_KEY_LOGGEDIN_USER","userService","getById","signup","login","logout","getEmptyCredentials","getLoggedinUser","userId","get","concat","_x","_signup","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee","userCred","user","wrap","_callee$","_context","prev","next","post","sent","abrupt","saveLocalUser","stop","_id","username","sessionStorage","setItem","JSON","stringify","_x2","_login","_callee2","_callee2$","_context2","_logout","_callee3","_callee3$","_context3","removeItem","length","undefined","console","log","parse","getItem"],"sources":["/Users/orit/Documents/CodingAcademy/spotify/frontend/src/services/user.service.js"],"sourcesContent":["\r\nimport { storageService } from './async-storage.service.js'\r\nimport { showErrorMsg } from './event-bus.service'\r\nimport { httpService } from './http.service.js'\r\nimport { utilService } from './util.service.js'\r\n\r\nconst USER_KEY = 'userDB'\r\n// _createUsers()\r\nconst STORAGE_KEY_LOGGEDIN_USER = 'loggedinUser'\r\n\r\nexport const userService = {\r\n  getById,\r\n  // remove,\r\n  signup,\r\n  login,\r\n  logout,\r\n  getEmptyCredentials,\r\n  getLoggedinUser,\r\n}\r\n\r\n\r\nfunction getById(userId) {\r\n  return httpService.get(`user/${userId}`)\r\n}\r\n\r\n// function remove(userId) {\r\n//   return storageService.remove(USER_KEY, userId)\r\n// }\r\n\r\n// function signup(credentials) {\r\n//   return storageService.query(USER_KEY)\r\n//     .then(users => {\r\n//       const existingUser = users.find(u => u.username === credentials.username)\r\n//       if (existingUser) {\r\n//         showErrorMsg('Username already exists, pick another one')\r\n//         return Promise.reject('Username already exists')\r\n//       } else {\r\n//         return storageService.post(USER_KEY, credentials)\r\n//           .then((user) => {\r\n//             _saveLoggedinUser(user)\r\n//             return user\r\n//           })\r\n//       }\r\n//     })\r\n// }\r\nasync function signup(userCred) {\r\n  const user = await httpService.post('auth/signup', userCred)\r\n  return saveLocalUser(user)\r\n}\r\nfunction saveLocalUser(user) {\r\n  user = { _id: user._id, username: user.username }\r\n  sessionStorage.setItem(STORAGE_KEY_LOGGEDIN_USER, JSON.stringify(user))\r\n  return user\r\n}\r\n\r\nasync function login(userCred) {\r\n\r\n  const user = await httpService.post('auth/login', userCred)\r\n  if (user) {\r\n    return saveLocalUser(user)\r\n  }\r\n}\r\nasync function logout() {\r\n  sessionStorage.removeItem(STORAGE_KEY_LOGGEDIN_USER)\r\n  return await httpService.post('auth/logout')\r\n}\r\n\r\n// function login(credentials) {\r\n//   return storageService.query(USER_KEY)\r\n//     .then(users => {\r\n//       const user = users.find(u => u.username === credentials.username)\r\n//       if (!user) {\r\n//         showErrorMsg(\"Username doesn't exist, Login failed\")\r\n//         return Promise.reject(\"Username doesn't exist, Login failed\")\r\n//       }\r\n//       _saveLoggedinUser(user)\r\n//       return user\r\n//     })\r\n// }\r\n\r\nfunction getEmptyCredentials(username = '') {\r\n  return { username }\r\n}\r\n\r\nfunction getLoggedinUser() {\r\n  console.log(JSON.parse(sessionStorage.getItem('loggedinUser') || null))\r\n  return JSON.parse(sessionStorage.getItem('loggedinUser') || null)\r\n}\r\n\r\n// function logout() {\r\n//   sessionStorage.removeItem('loggedinUser')\r\n//   return Promise.resolve()\r\n// }\r\n\r\n// function _saveLoggedinUser(user) {\r\n//   sessionStorage.setItem('loggedinUser', JSON.stringify(user))\r\n// }\r\n\r\n\r\n// function _createUsers() {\r\n//   let users = utilService.loadFromStorage(USER_KEY)\r\n//   if (!users || !users.length) {\r\n//     users = []\r\n//     users.push(_createUser('muki'))\r\n//     users.push(_createUser('puki'))\r\n\r\n//     utilService.saveToStorage(USER_KEY, users)\r\n//   }\r\n// }\r\n\r\n// function _createUser(username) {\r\n//   const user = getEmptyCredentials(username)\r\n//   user._id = utilService.makeId()\r\n//   return user\r\n// }\r\n//     update\r\n// }\r\n\r\n// window.us = userService\r\n\r\n// function getUsers() {\r\n//     // return storageService.query('user')\r\n//     return httpService.get(`user`)\r\n// }\r\n\r\n// async function getById(userId) {\r\n//     // const user = await storageService.get('user', userId)\r\n//     const user = await httpService.get(`user/${userId}`)\r\n\r\n//     // socketService.emit(SOCKET_EMIT_USER_WATCH, userId)\r\n//     // socketService.off(SOCKET_EVENT_USER_UPDATED, onUserUpdate)\r\n//     // socketService.on(SOCKET_EVENT_USER_UPDATED, onUserUpdate)\r\n\r\n//     return user\r\n// }\r\n\r\n// function remove(userId) {\r\n//     // return storageService.remove('user', userId)\r\n//     return httpService.delete(`user/${userId}`)\r\n// }\r\n\r\n// async function update({ _id, score }) {\r\n//     // const user = await storageService.get('user', _id)\r\n//     // user.score = score\r\n//     // await storageService.put('user', user)\r\n\r\n//     const user = await httpService.put(`user/${_id}`, { _id, score })\r\n//     // Handle case in which admin updates other user's details\r\n//     if (getLoggedinUser()._id === user._id) _setLoggedinUser(user)\r\n//     return user\r\n// }\r\n\r\n// function login(credentials) {\r\n//     console.log('credentials:', credentials)\r\n//     return httpService.post(BASE_URL + 'login', credentials)\r\n//         .then(_setLoggedinUser)\r\n//         .catch(err => {\r\n//             console.log('err:', err)\r\n//             throw new Error('Invalid login')\r\n//         })\r\n// }\r\n\r\n// function signup({ username }) {\r\n//     const user = { username }\r\n//     return httpService.post(BASE_URL + 'signup', user)\r\n//         .then(_setLoggedinUser)\r\n// }\r\n\r\n\r\n\r\n// function logout() {\r\n//     return httpService.post(BASE_URL + 'logout')\r\n//         .then(() => {\r\n//             sessionStorage.removeItem(STORAGE_KEY_LOGGEDIN)\r\n//         })\r\n// }\r\n\r\n// function getLoggedinUser() {\r\n//     return JSON.parse(sessionStorage.getItem(STORAGE_KEY_LOGGEDIN))\r\n// }\r\n\r\n// function _setLoggedinUser(user) {\r\n//     const userToSave = { _id: user._id, username: user.username }\r\n//     sessionStorage.setItem(STORAGE_KEY_LOGGEDIN, JSON.stringify(userToSave))\r\n//     return userToSave\r\n// }\r\n\r\n\r\n\r\n\r\n"],"mappings":"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,MAAA,IAAAjC,SAAA,MAAAkC,SAAA,CAAAlC,SAAA,IAAG,EAAE,CACxC,MAAO,CAAEkB,QAAQ,CAARA,QAAS,CAAC,CACrB,CAEA,QAAS,CAAAzB,eAAeA,CAAA,CAAG,CACzB0C,OAAO,CAACC,GAAG,CAACf,IAAI,CAACgB,KAAK,CAAClB,cAAc,CAACmB,OAAO,CAAC,cAAc,CAAC,EAAI,IAAI,CAAC,CAAC,CACvE,MAAO,CAAAjB,IAAI,CAACgB,KAAK,CAAClB,cAAc,CAACmB,OAAO,CAAC,cAAc,CAAC,EAAI,IAAI,CAAC,CACnE,CAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}